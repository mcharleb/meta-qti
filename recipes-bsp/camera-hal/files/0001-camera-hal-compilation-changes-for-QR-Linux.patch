From e800be2dc90b4a1c34f415d52a2030376e39ae7a Mon Sep 17 00:00:00 2001
From: Punit Soni <punits@qti.qualcomm.com>
Date: Thu, 2 Apr 2015 17:51:19 -0700
Subject: [PATCH] camera-hal: compilation changes for QR Linux

Change-Id: I0014940dac5779c26586b4f771337f6007cb143a
---
 Makefile.am                                        |   8 ++
 QCamera2/stack/Makefile.am                         |   8 ++
 QCamera2/stack/common/cam_intf.h                   |   9 ++
 QCamera2/stack/common/cam_queue.h                  |   2 +
 QCamera2/stack/common/cam_semaphore.h              |   2 +
 QCamera2/stack/common/mm_jpeg_interface.h          |   1 +
 QCamera2/stack/mm-camera-interface/Makefile.am     |  55 +++++++++++
 QCamera2/stack/mm-camera-interface/inc/mm_camera.h |   0
 .../stack/mm-camera-interface/inc/mm_camera_dbg.h  |  16 +++-
 .../mm-camera-interface/src/mm_camera_interface.c  |   3 +-
 .../stack/mm-camera-interface/src/mm_camera_sock.c |   7 +-
 QCamera2/stack/mm-camera-test/Makefile.am          |  44 +++++++++
 QCamera2/stack/mm-camera-test/inc/mm_qcamera_app.h |   5 +-
 QCamera2/stack/mm-camera-test/inc/mm_qcamera_dbg.h |  14 ++-
 .../stack/mm-camera-test/inc/mm_qcamera_socket.h   |   7 ++
 QCamera2/stack/mm-camera-test/src/mm_qcamera_app.c |  16 +++-
 .../stack/mm-camera-test/src/mm_qcamera_preview.c  |   0
 QCamera2/stack/mm-jpeg-interface/Makefile.am       |  36 ++++++++
 QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_dbg.h |   5 +-
 .../stack/mm-jpeg-interface/inc/mm_jpeg_ionbuf.h   |   1 +
 QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c     |   2 +
 .../stack/mm-jpeg-interface/src/mm_jpeg_exif.c     |   3 +
 .../mm-jpeg-interface/src/mm_jpeg_interface.c      |   2 +
 .../stack/mm-jpeg-interface/src/mm_jpeg_queue.c    |   2 +
 QCamera2/stack/mm-jpeg-interface/src/mm_jpegdec.c  |   2 +
 configure.ac                                       | 102 +++++++++++++++++++++
 mm-image-codec/Makefile.am                         |  23 +++++
 mm-image-codec/configure.ac                        |  61 ++++++++++++
 mm-image-codec/qomx_core/qomx_core.c               |   8 ++
 29 files changed, 423 insertions(+), 21 deletions(-)
 create mode 100755 Makefile.am
 create mode 100755 QCamera2/stack/Makefile.am
 mode change 100644 => 100755 QCamera2/stack/common/cam_intf.h
 mode change 100644 => 100755 QCamera2/stack/common/cam_semaphore.h
 mode change 100644 => 100755 QCamera2/stack/common/mm_jpeg_interface.h
 create mode 100755 QCamera2/stack/mm-camera-interface/Makefile.am
 mode change 100644 => 100755 QCamera2/stack/mm-camera-interface/inc/mm_camera.h
 mode change 100644 => 100755 QCamera2/stack/mm-camera-interface/src/mm_camera_interface.c
 create mode 100755 QCamera2/stack/mm-camera-test/Makefile.am
 mode change 100644 => 100755 QCamera2/stack/mm-camera-test/inc/mm_qcamera_app.h
 mode change 100644 => 100755 QCamera2/stack/mm-camera-test/inc/mm_qcamera_socket.h
 mode change 100644 => 100755 QCamera2/stack/mm-camera-test/src/mm_qcamera_app.c
 mode change 100644 => 100755 QCamera2/stack/mm-camera-test/src/mm_qcamera_preview.c
 create mode 100755 QCamera2/stack/mm-jpeg-interface/Makefile.am
 mode change 100644 => 100755 QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_dbg.h
 mode change 100644 => 100755 QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_ionbuf.h
 mode change 100644 => 100755 QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c
 mode change 100644 => 100755 QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_exif.c
 mode change 100644 => 100755 QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_interface.c
 mode change 100644 => 100755 QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_queue.c
 mode change 100644 => 100755 QCamera2/stack/mm-jpeg-interface/src/mm_jpegdec.c
 create mode 100755 configure.ac
 create mode 100755 mm-image-codec/Makefile.am
 create mode 100755 mm-image-codec/configure.ac
 mode change 100644 => 100755 mm-image-codec/qomx_core/qomx_core.c

diff --git a/Makefile.am b/Makefile.am
new file mode 100755
index 0000000..1980fbf
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,8 @@
+ACLOCAL_AMFLAGS = -I m4
+
+dirs =
+dirs += mm-image-codec
+dirs += QCamera2/stack
+
+SUBDIRS = $(dirs)
+
diff --git a/QCamera2/stack/Makefile.am b/QCamera2/stack/Makefile.am
new file mode 100755
index 0000000..cc16630
--- /dev/null
+++ b/QCamera2/stack/Makefile.am
@@ -0,0 +1,8 @@
+ACLOCAL_AMFLAGS = -I m4
+
+dirs =
+dirs += mm-camera-interface
+dirs += mm-camera-test
+dirs += mm-jpeg-interface
+SUBDIRS = $(dirs)
+
diff --git a/QCamera2/stack/common/cam_intf.h b/QCamera2/stack/common/cam_intf.h
old mode 100644
new mode 100755
index 67860b3..93b15d1
--- a/QCamera2/stack/common/cam_intf.h
+++ b/QCamera2/stack/common/cam_intf.h
@@ -30,10 +30,19 @@
 #ifndef __QCAMERA_INTF_H__
 #define __QCAMERA_INTF_H__
 
+#include <stdint.h>
 #include <media/msmb_isp.h>
 #include <semaphore.h>
 #include "cam_types.h"
 
+#ifdef _ANDROID_
+#define CAM_SOCKET_PATH "/data/cam_socket"
+#define CAM_SOCKET_DIR "/data"
+#else
+#define CAM_SOCKET_PATH "/tmp/camera/cam_socket"
+#define CAM_SOCKET_DIR "/tmp/camera"
+#endif
+
 #define ONE_MB_OF_PARAMS (1024 * 1024)
 #define CAM_PRIV_IOCTL_BASE (V4L2_CID_PRIVATE_BASE + 14)
 typedef enum {
diff --git a/QCamera2/stack/common/cam_queue.h b/QCamera2/stack/common/cam_queue.h
index a23c622..c7e50b7 100755
--- a/QCamera2/stack/common/cam_queue.h
+++ b/QCamera2/stack/common/cam_queue.h
@@ -28,6 +28,8 @@
  */
 
 #include "cam_list.h"
+#include <string.h>
+#include <stdlib.h>
 
 typedef struct {
     struct cam_list list;
diff --git a/QCamera2/stack/common/cam_semaphore.h b/QCamera2/stack/common/cam_semaphore.h
old mode 100644
new mode 100755
index a52f907..7089a64
--- a/QCamera2/stack/common/cam_semaphore.h
+++ b/QCamera2/stack/common/cam_semaphore.h
@@ -30,6 +30,8 @@
 #ifndef __QCAMERA_SEMAPHORE_H__
 #define __QCAMERA_SEMAPHORE_H__
 
+#include <pthread.h>
+
 #ifdef __cplusplus
 extern "C" {
 #endif
diff --git a/QCamera2/stack/common/mm_jpeg_interface.h b/QCamera2/stack/common/mm_jpeg_interface.h
old mode 100644
new mode 100755
index 138b685..949f393
--- a/QCamera2/stack/common/mm_jpeg_interface.h
+++ b/QCamera2/stack/common/mm_jpeg_interface.h
@@ -29,6 +29,7 @@
 
 #ifndef MM_JPEG_INTERFACE_H_
 #define MM_JPEG_INTERFACE_H_
+#include <stdint.h>
 #include "QOMX_JpegExtensions.h"
 #include "cam_intf.h"
 
diff --git a/QCamera2/stack/mm-camera-interface/Makefile.am b/QCamera2/stack/mm-camera-interface/Makefile.am
new file mode 100755
index 0000000..c353f3a
--- /dev/null
+++ b/QCamera2/stack/mm-camera-interface/Makefile.am
@@ -0,0 +1,55 @@
+ACLOCAL_AMFLAGS = -I m4
+
+#libmmcamera_interface.so
+lib_LTLIBRARIES = libmmcamera_interface.la
+
+libmmcamera_interface_la_CFLAGS = -fPIC
+libmmcamera_interface_la_CFLAGS += -DUSE_ION
+libmmcamera_interface_la_CFLAGS += -Werror=implicit
+if MSM8974
+libmmcamera_interface_la_CFLAGS += -DVENUS_PRESENT
+endif
+
+libmmcamera_interface_la_CFLAGS += -I inc
+libmmcamera_interface_la_CFLAGS += -I ../common
+libmmcamera_interface_la_CFLAGS += -I ../../../android-includes
+#TODO:
+#LOCAL_C_INCLUDES += hardware/qcom/media/mm-core/inc
+
+h_sources = ../common/cam_intf.h \
+            ../common/cam_types.h \
+            ../common/cam_list.h \
+            ../common/cam_queue.h \
+            ../common/cam_semaphore.h \
+            ../common/mm_camera_interface.h \
+            ../common/mm_jpeg_interface.h \
+            inc/mm_camera_dbg.h \
+            inc/mm_camera.h \
+            inc/mm_camera_sock.h
+pkgincludedir = $(includedir)/mm_camera_interface
+library_includedir = $(pkgincludedir)
+library_include_HEADERS = $(h_sources)
+
+libmmcamera_interface_la_SOURCES = src/mm_camera_interface.c
+libmmcamera_interface_la_SOURCES += src/mm_camera.c
+libmmcamera_interface_la_SOURCES += src/mm_camera_channel.c
+libmmcamera_interface_la_SOURCES += src/mm_camera_stream.c
+libmmcamera_interface_la_SOURCES += src/mm_camera_thread.c
+libmmcamera_interface_la_SOURCES += src/mm_camera_sock.c
+libmmcamera_interface_la_SOURCES += src/cam_intf.c
+
+#TODO:
+#pkgconfigdir = $(libdir)/pkgconfig
+#pkgconfig_DATA = camera-hal.pc
+#EXTRA_DIST = $(pkgconfig_DATA)
+
+libmmcamera_interface_la_LDFLAGS = -shared
+libmmcamera_interface_la_LIBADD = -ldl -lpthread
+
+dirs =
+SUBDIRS = $(dirs)
+
+if USE_DLOG
+libmmcamera_interface_la_CFLAGS += -DUSE_DLOG @DLOG_CFLAGS@	
+libmmcamera_interface_la_LIBADD += @DLOG_LIBS@
+endif
diff --git a/QCamera2/stack/mm-camera-interface/inc/mm_camera.h b/QCamera2/stack/mm-camera-interface/inc/mm_camera.h
old mode 100644
new mode 100755
diff --git a/QCamera2/stack/mm-camera-interface/inc/mm_camera_dbg.h b/QCamera2/stack/mm-camera-interface/inc/mm_camera_dbg.h
index 4f3c94f..fffa7e7 100755
--- a/QCamera2/stack/mm-camera-interface/inc/mm_camera_dbg.h
+++ b/QCamera2/stack/mm-camera-interface/inc/mm_camera_dbg.h
@@ -56,8 +56,8 @@
     #define CDBG(fmt, args...) ALOGE(fmt, ##args)
   #else
     #include <stdio.h>
-    #define CDBG(fmt, args...) fprintf(stderr, fmt, ##args)
-    #define ALOGE(fmt, args...) fprintf(stderr, fmt, ##args)
+    #define CDBG(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+    #define ALOGE(fmt, args...) fprintf(stderr, fmt"\n", ##args)
   #endif
 #endif
 
@@ -65,7 +65,15 @@
   #define CDBG_HIGH(fmt, args...)  ALOGD(fmt, ##args)
   #define CDBG_ERROR(fmt, args...)  ALOGE(fmt, ##args)
 #else
-  #define CDBG_HIGH(fmt, args...) fprintf(stderr, fmt, ##args)
-  #define CDBG_ERROR(fmt, args...) fprintf(stderr, fmt, ##args)
+  #define CDBG_HIGH(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+  #define CDBG_ERROR(fmt, args...) fprintf(stderr, fmt"\n", ##args)
 #endif
+
+#undef CDBG_HIGH
+#undef CDBG_ERROR
+
+#define CDBG(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+#define CDBG_HIGH(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+#define CDBG_ERROR(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+
 #endif /* __MM_CAMERA_DBG_H__ */
diff --git a/QCamera2/stack/mm-camera-interface/src/mm_camera_interface.c b/QCamera2/stack/mm-camera-interface/src/mm_camera_interface.c
old mode 100644
new mode 100755
index b0ebbc7..44b9e06
--- a/QCamera2/stack/mm-camera-interface/src/mm_camera_interface.c
+++ b/QCamera2/stack/mm-camera-interface/src/mm_camera_interface.c
@@ -36,6 +36,7 @@
 #include <poll.h>
 #include <linux/media.h>
 #include <signal.h>
+#include <stdint.h>
 #include <media/msm_cam_sensor.h>
 
 #include "mm_camera_dbg.h"
@@ -1238,7 +1239,7 @@ void get_sensor_info()
                 temp = entity.flags >> 8;
                 mount_angle = (temp & 0xFF) * 90;
                 facing = (temp >> 8);
-                ALOGD("index = %d flag = %x mount_angle = %d facing = %d\n"
+                CDBG("index = %d flag = %x mount_angle = %d facing = %d\n"
                     , num_cameras, (unsigned int)temp, (unsigned int)mount_angle,
                     (unsigned int)facing);
                 g_cam_ctrl.info[num_cameras].facing = facing;
diff --git a/QCamera2/stack/mm-camera-interface/src/mm_camera_sock.c b/QCamera2/stack/mm-camera-interface/src/mm_camera_sock.c
index 58953d1..57f6e4e 100755
--- a/QCamera2/stack/mm-camera-interface/src/mm_camera_sock.c
+++ b/QCamera2/stack/mm-camera-interface/src/mm_camera_sock.c
@@ -34,7 +34,9 @@
 #include <string.h>
 #include <sys/socket.h>
 #include <sys/uio.h>
-#include <sys/un.h>
+#include <linux/un.h>
+
+#include "cam_intf.h"
 
 #include "mm_camera_dbg.h"
 #include "mm_camera_sock.h"
@@ -75,7 +77,8 @@ int mm_camera_socket_create(int cam_id, mm_camera_sock_type_t sock_type)
 
     memset(&sock_addr, 0, sizeof(sock_addr));
     sock_addr.sun_family = AF_UNIX;
-    snprintf(sock_addr.sun_path, UNIX_PATH_MAX, "/data/cam_socket%d", cam_id);
+    CDBG_ERROR("socket path = %s", CAM_SOCKET_PATH);
+    snprintf(sock_addr.sun_path, UNIX_PATH_MAX, CAM_SOCKET_PATH"%d", cam_id);
     if((rc = connect(socket_fd, (struct sockaddr *) &sock_addr,
       sizeof(sock_addr))) != 0) {
       close(socket_fd);
diff --git a/QCamera2/stack/mm-camera-test/Makefile.am b/QCamera2/stack/mm-camera-test/Makefile.am
new file mode 100755
index 0000000..0078ddc
--- /dev/null
+++ b/QCamera2/stack/mm-camera-test/Makefile.am
@@ -0,0 +1,44 @@
+# mm-qcamera-app
+bin_PROGRAMS = mm-qcamera-app
+
+mm_qcamera_app_CFLAGS = -DAMSS_VERSION=$(AMSS_VERSION)
+mm_qcamera_app_CFLAGS += -DUSE_ION
+mm_qcamera_app_CFLAGS += -Werror=implicit
+
+mm_qcamera_app_CFLAGS += -I inc
+mm_qcamera_app_CFLAGS += -I ../common
+mm_qcamera_app_CFLAGS += -I ../../../
+mm_qcamera_app_CFLAGS += -I ../../../mm-image-codec/qexif
+mm_qcamera_app_CFLAGS += -I ../../../mm-image-codec/qomx_core
+mm_qcamera_app_CFLAGS += -I ../../../android-includes
+mm_qcamera_app_CFLAGS += -I ../mm-camera-interface/inc
+
+mm_qcamera_app_CFLAGS += -DCAMERA_ION_HEAP_ID=ION_IOMMU_HEAP_ID
+if MSM8974
+mm_qcamera_app_CFLAGS += -DCAMERA_GRALLOC_HEAP_ID=GRALLOC_USAGE_PRIVATE_IOMMU_HEAP
+mm_qcamera_app_CFLAGS += -DCAMERA_GRALLOC_FALLBACK_HEAP_ID=GRALLOC_USAGE_PRIVATE_IOMMU_HEAP
+mm_qcamera_app_CFLAGS += -DCAMERA_ION_FALLBACK_HEAP_ID=ION_IOMMU_HEAP_ID
+mm_qcamera_app_CFLAGS += -DCAMERA_GRALLOC_CACHING_ID=0
+mm_qcamera_app_CFLAGS += -DNUM_RECORDING_BUFFERS=9
+endif
+
+#sources
+mm_qcamera_app_SOURCES = src/mm_qcamera_app.c
+mm_qcamera_app_SOURCES += src/mm_qcamera_commands.c
+mm_qcamera_app_SOURCES += src/mm_qcamera_main_menu.c
+mm_qcamera_app_SOURCES += src/mm_qcamera_preview.c
+mm_qcamera_app_SOURCES += src/mm_qcamera_queue.c
+mm_qcamera_app_SOURCES += src/mm_qcamera_rdi.c
+mm_qcamera_app_SOURCES += src/mm_qcamera_reprocess.c
+mm_qcamera_app_SOURCES += src/mm_qcamera_snapshot.c
+mm_qcamera_app_SOURCES += src/mm_qcamera_socket.c
+mm_qcamera_app_SOURCES += src/mm_qcamera_unit_test.c
+mm_qcamera_app_SOURCES += src/mm_qcamera_video.c
+
+mm_qcamera_app_LDADD = -ldl
+mm_qcamera_app_LDADD += ../../../QCamera2/stack/mm-camera-interface/libmmcamera_interface.la
+
+if USE_DLOG
+mm_qcamera_app_CFLAGS += -DUSE_DLOG @DLOG_CFLAGS@	
+mm_qcamera_app_LDADD += @DLOG_LIBS@
+endif
diff --git a/QCamera2/stack/mm-camera-test/inc/mm_qcamera_app.h b/QCamera2/stack/mm-camera-test/inc/mm_qcamera_app.h
old mode 100644
new mode 100755
index 077a068..2703646
--- a/QCamera2/stack/mm-camera-test/inc/mm_qcamera_app.h
+++ b/QCamera2/stack/mm-camera-test/inc/mm_qcamera_app.h
@@ -38,6 +38,7 @@
 #include <fcntl.h>
 #include <poll.h>
 #include <linux/fb.h>
+#include <stdint.h>
 #include <linux/msm_mdp.h>
 #include <semaphore.h>
 
@@ -57,8 +58,8 @@
 #define CAPTURE_BUF_NUM 5
 
 #define DEFAULT_PREVIEW_FORMAT    CAM_FORMAT_YUV_420_NV21
-#define DEFAULT_PREVIEW_WIDTH     640
-#define DEFAULT_PREVIEW_HEIGHT    480
+#define DEFAULT_PREVIEW_WIDTH     3840
+#define DEFAULT_PREVIEW_HEIGHT    2160
 #define DEFAULT_PREVIEW_PADDING   CAM_PAD_TO_WORD
 #define DEFAULT_VIDEO_FORMAT      CAM_FORMAT_YUV_420_NV12
 #define DEFAULT_VIDEO_WIDTH       800
diff --git a/QCamera2/stack/mm-camera-test/inc/mm_qcamera_dbg.h b/QCamera2/stack/mm-camera-test/inc/mm_qcamera_dbg.h
index bb5ab81..07ff9cd 100755
--- a/QCamera2/stack/mm-camera-test/inc/mm_qcamera_dbg.h
+++ b/QCamera2/stack/mm-camera-test/inc/mm_qcamera_dbg.h
@@ -30,7 +30,7 @@
 #ifndef __MM_QCAMERA_DBG_H__
 #define __MM_QCAMERA_DBG_H__
 
-//#define LOG_DEBUG 1
+#define LOG_DEBUG 1
 
 #ifndef LOG_DEBUG
   #ifdef _ANDROID_
@@ -56,8 +56,8 @@
     #define CDBG(fmt, args...) ALOGE(fmt, ##args)
   #else
     #include <stdio.h>
-    #define CDBG(fmt, args...) fprintf(stderr, fmt, ##args)
-    #define ALOGE(fmt, args...) fprintf(stderr, fmt, ##args)
+    #define CDBG(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+    #define ALOGE(fmt, args...) fprintf(stderr, fmt"\n", ##args)
   #endif
 #endif
 
@@ -65,7 +65,11 @@
   #define CDBG_HIGH(fmt, args...)  ALOGE(fmt, ##args)
   #define CDBG_ERROR(fmt, args...)  ALOGE(fmt, ##args)
 #else
-  #define CDBG_HIGH(fmt, args...) fprintf(stderr, fmt, ##args)
-  #define CDBG_ERROR(fmt, args...) fprintf(stderr, fmt, ##args)
+  #define CDBG(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+  #define CDBG_HIGH(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+  #define CDBG_ERROR(fmt, args...) fprintf(stderr, fmt"\n", ##args)
 #endif
+
+#define DUMP_PRV_IN_FILE 1
+
 #endif /* __MM_QCAMERA_DBG_H__ */
diff --git a/QCamera2/stack/mm-camera-test/inc/mm_qcamera_socket.h b/QCamera2/stack/mm-camera-test/inc/mm_qcamera_socket.h
old mode 100644
new mode 100755
index c054d63..adffbb3
--- a/QCamera2/stack/mm-camera-test/inc/mm_qcamera_socket.h
+++ b/QCamera2/stack/mm-camera-test/inc/mm_qcamera_socket.h
@@ -47,8 +47,14 @@
 #include <sys/time.h>
 #include <linux/socket.h>
 #include <arpa/inet.h>
+
+#ifdef _ANDROID_
 #include <utils/Log.h>
+#endif
 
+/* Generates compilation errors in Linux. These macros are not used in the
+   code anywhere, disabling them. */
+#if 0
 #undef __FD_SET
 #define __FD_SET(fd, fdsetp) \
   (((fd_set *)(fdsetp))->fds_bits[(fd) >> 5] |= (1<<((fd) & 31)))
@@ -64,6 +70,7 @@
 #undef  __FD_ZERO
 #define __FD_ZERO(fdsetp) \
   (memset (fdsetp, 0, sizeof (*(fd_set *)(fdsetp))))
+#endif
 
 #define TUNESERVER_MAX_RECV 2048
 #define TUNESERVER_MAX(a, b)  (((a) > (b)) ? (a) : (b))
diff --git a/QCamera2/stack/mm-camera-test/src/mm_qcamera_app.c b/QCamera2/stack/mm-camera-test/src/mm_qcamera_app.c
old mode 100644
new mode 100755
index d65038d..94eb418
--- a/QCamera2/stack/mm-camera-test/src/mm_qcamera_app.c
+++ b/QCamera2/stack/mm-camera-test/src/mm_qcamera_app.c
@@ -41,6 +41,12 @@ static pthread_mutex_t app_mutex;
 static int thread_status = 0;
 static pthread_cond_t app_cond_v;
 
+#ifdef _ANDROID_
+#define CAMERA_DUMP_PATH "/data"
+#else
+#define CAMERA_DUMP_PATH "./camera-dump"
+#endif
+
 #define MM_QCAMERA_APP_NANOSEC_SCALE 1000000000
 
 int mm_camera_app_timedwait(uint8_t seconds)
@@ -243,7 +249,7 @@ void mm_app_dump_frame(mm_camera_buf_def_t *frame,
     int i;
     int offset = 0;
     if ( frame != NULL) {
-        snprintf(file_name, sizeof(file_name), "/data/test/%s_%04d.%s", name, frame_idx, ext);
+        snprintf(file_name, sizeof(file_name), CAMERA_DUMP_PATH"/%s_%04d.%s", name, frame_idx, ext);
         file_fd = open(file_name, O_RDWR | O_CREAT, 0777);
         if (file_fd < 0) {
             CDBG_ERROR("%s: cannot open file %s \n", __func__, file_name);
@@ -801,7 +807,7 @@ int commitSetBatch(mm_camera_test_obj_t *test_obj)
 
     if (param_buf->num_entry > 0) {
         rc = test_obj->cam->ops->set_parms(test_obj->cam->camera_handle, param_buf);
-        ALOGD("%s:waiting for commitSetBatch to complete",__func__);
+        CDBG("%s:waiting for commitSetBatch to complete",__func__);
         sem_wait(&param_buf->cam_sync_sem);
     }
 
@@ -816,7 +822,7 @@ int commitGetBatch(mm_camera_test_obj_t *test_obj)
 
     if (param_buf->num_entry > 0) {
         rc = test_obj->cam->ops->get_parms(test_obj->cam->camera_handle, param_buf);
-        ALOGD("%s:waiting for commitGetBatch to complete",__func__);
+        CDBG("%s:waiting for commitGetBatch to complete",__func__);
         sem_wait(&param_buf->cam_sync_sem);
     }
     return rc;
@@ -844,7 +850,7 @@ int AddSetParmEntryToBatch(mm_camera_test_obj_t *test_obj,
      */
     for (j = 0; j < num_entry; j++) {
       if (paramType == curr_param->entry_type) {
-        ALOGD("%s:Batch parameter overwrite for param: %d",
+        CDBG("%s:Batch parameter overwrite for param: %d",
                                                 __func__, paramType);
         break;
       }
@@ -870,7 +876,7 @@ int AddSetParmEntryToBatch(mm_camera_test_obj_t *test_obj,
     curr_param->size = (int32_t)paramLength;
     curr_param->aligned_size = aligned_size_req;
     memcpy(&curr_param->data[0], paramValue, paramLength);
-    ALOGD("%s: num_entry: %d, paramType: %d, paramLength: %d, aligned_size_req: %d",
+    CDBG("%s: num_entry: %d, paramType: %d, paramLength: %d, aligned_size_req: %d",
             __func__, param_buf->num_entry, paramType, paramLength, aligned_size_req);
 
     return MM_CAMERA_OK;
diff --git a/QCamera2/stack/mm-camera-test/src/mm_qcamera_preview.c b/QCamera2/stack/mm-camera-test/src/mm_qcamera_preview.c
old mode 100644
new mode 100755
diff --git a/QCamera2/stack/mm-jpeg-interface/Makefile.am b/QCamera2/stack/mm-jpeg-interface/Makefile.am
new file mode 100755
index 0000000..6b15adf
--- /dev/null
+++ b/QCamera2/stack/mm-jpeg-interface/Makefile.am
@@ -0,0 +1,36 @@
+ACLOCAL_AMFLAGS = -I m4
+
+#libmmjpeg_interface.so
+lib_LTLIBRARIES = libmmjpeg_interface.la
+
+libmmjpeg_interface_la_CFLAGS = -fPIC
+libmmjpeg_interface_la_CFLAGS += -DMM_JPEG_CONCURRENT_SESSIONS_COUNT=2
+
+
+libmmjpeg_interface_la_CFLAGS += -I inc
+libmmjpeg_interface_la_CFLAGS += -I ../common
+libmmjpeg_interface_la_CFLAGS += -I ../../../mm-image-codec/qexif
+libmmjpeg_interface_la_CFLAGS += -I ../../../mm-image-codec/qomx_core
+libmmjpeg_interface_la_CFLAGS += -I ../../../android-includes
+
+libmmjpeg_interface_la_CFLAGS += -DUSE_ION
+
+libmmjpeg_interface_la_SOURCES = src/mm_jpeg_queue.c
+libmmjpeg_interface_la_SOURCES += src/mm_jpeg_exif.c
+libmmjpeg_interface_la_SOURCES += src/mm_jpeg.c
+libmmjpeg_interface_la_SOURCES += src/mm_jpeg_interface.c
+libmmjpeg_interface_la_SOURCES += src/mm_jpeg_ionbuf.c
+libmmjpeg_interface_la_SOURCES += src/mm_jpegdec_interface.c
+libmmjpeg_interface_la_SOURCES += src/mm_jpegdec.c
+
+libmmjpeg_interface_la_LDFLAGS = -shared
+libmmjpeg_interface_la_LIBADD = -ldl -lm
+libmmjpeg_interface_la_LIBADD += ../../../mm-image-codec/libqomx_core.la
+
+dirs =
+SUBDIRS = $(dirs)
+
+if USE_DLOG
+libmmjpeg_interface_la_CFLAGS += -DUSE_DLOG @DLOG_CFLAGS@	
+libmmjpeg_interface_la_LIBADD += @DLOG_LIBS@
+endif
diff --git a/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_dbg.h b/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_dbg.h
old mode 100644
new mode 100755
index 26ec4e0..4c0a162
--- a/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_dbg.h
+++ b/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_dbg.h
@@ -55,8 +55,9 @@
     #define CDBG(fmt, args...) ALOGE(fmt, ##args)
   #else
     #include <stdio.h>
-    #define CDBG(fmt, args...) fprintf(stderr, fmt, ##args)
-    #define ALOGE(fmt, args...) fprintf(stderr, fmt, ##args)
+    #define CDBG(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+    #define ALOGE(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+    #define ALOGD(fmt, args...) fprintf(stderr, fmt"\n", ##args)
   #endif
 #endif
 
diff --git a/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_ionbuf.h b/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_ionbuf.h
old mode 100644
new mode 100755
index 5968013..ad5e950
--- a/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_ionbuf.h
+++ b/QCamera2/stack/mm-jpeg-interface/inc/mm_jpeg_ionbuf.h
@@ -31,6 +31,7 @@
 #define __MM_JPEG_IONBUF_H__
 
 
+#include <stdint.h>
 #include <stdio.h>
 #include <linux/msm_ion.h>
 #include <sys/mman.h>
diff --git a/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c b/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c
old mode 100644
new mode 100755
index fa0cab1..1c37c7e
--- a/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c
+++ b/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg.c
@@ -27,6 +27,8 @@
  *
  */
 
+#include <string.h>
+#include <stdlib.h>
 #include <pthread.h>
 #include <errno.h>
 #include <sys/ioctl.h>
diff --git a/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_exif.c b/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_exif.c
old mode 100644
new mode 100755
index ca65b35..42472cd
--- a/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_exif.c
+++ b/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_exif.c
@@ -27,6 +27,9 @@
  *
  */
 
+#include <string.h>
+#include <stdlib.h>
+#include <stdint.h>
 #include "mm_jpeg_dbg.h"
 #include "mm_jpeg.h"
 #include <errno.h>
diff --git a/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_interface.c b/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_interface.c
old mode 100644
new mode 100755
index e60c493..5c3b26f
--- a/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_interface.c
+++ b/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_interface.c
@@ -33,6 +33,8 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
+#include <stdlib.h>
+#include <string.h>
 
 #include "mm_jpeg_dbg.h"
 #include "mm_jpeg_interface.h"
diff --git a/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_queue.c b/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_queue.c
old mode 100644
new mode 100755
index d721aab..3e0872d
--- a/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_queue.c
+++ b/QCamera2/stack/mm-jpeg-interface/src/mm_jpeg_queue.c
@@ -28,6 +28,8 @@
  */
 
 #include <pthread.h>
+#include <stdlib.h>
+#include <string.h>
 #include "mm_jpeg_dbg.h"
 #include "mm_jpeg.h"
 
diff --git a/QCamera2/stack/mm-jpeg-interface/src/mm_jpegdec.c b/QCamera2/stack/mm-jpeg-interface/src/mm_jpegdec.c
old mode 100644
new mode 100755
index 0001714..67b3421
--- a/QCamera2/stack/mm-jpeg-interface/src/mm_jpegdec.c
+++ b/QCamera2/stack/mm-jpeg-interface/src/mm_jpegdec.c
@@ -34,6 +34,8 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <poll.h>
+#include <stdlib.h>
+#include <string.h>
 
 #include "mm_jpeg_dbg.h"
 #include "mm_jpeg_interface.h"
diff --git a/configure.ac b/configure.ac
new file mode 100755
index 0000000..247598c
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,102 @@
+AC_PREREQ(2.61)
+
+AC_INIT([camera-hal],1.0.0)
+
+AM_INIT_AUTOMAKE([-Werror -Wall gnu foreign subdir-objects])
+
+AM_MAINTAINER_MODE
+
+AC_CONFIG_HEADER([configure.h])
+AC_CONFIG_MACRO_DIR([m4])
+
+# Checks for programs.
+AM_PROG_AS
+AM_PROG_AR
+AC_PROG_CC
+AC_PROG_CXX
+AM_PROG_CC_C_O
+AC_PROG_LIBTOOL
+AC_PROG_AWK
+AC_PROG_CPP
+AC_PROG_INSTALL
+AC_PROG_LN_S
+AC_PROG_MAKE_SET
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_TYPE_SIZE_T
+AC_TYPE_SSIZE_T
+AC_TYPE_UINT16_T
+AC_TYPE_UINT32_T
+AC_TYPE_UINT64_T
+AC_TYPE_UINT8_T
+
+AC_CHECK_TOOL(OBJCOPY, objcopy, false)
+
+AMSS_VERSION=
+VFE_VERS=
+MSM_VERSION=
+DEBUG_CPPFLAGS=
+DEBUG_CFLAGS=
+DEBUG_LDFLAGS=
+
+AC_ARG_WITH([sanitized-headers],
+	[AS_HELP_STRING([--with-sanitized-headers=DIR],[location of the sanitized Linux kernel headers])],
+	[CPPFLAGS="$CPPFLAGS -I$withval"; CFLAGS="$CFLAGS -I$withval"])
+
+AC_ARG_WITH([additional-include-directives],
+        [AS_HELP_STRING([--with-additional-include-directives=DIR],[additional -I include paths for the C pre-processor])],
+        [CPPFLAGS="$CPPFLAGS -I$withval"])
+
+AC_ARG_ENABLE([target],
+	[AS_HELP_STRING([--enable-target=TARGET],[target to build for])],
+	[],
+	[enable_target=none]
+)
+
+if test "x$enable_target" = "xmsm8974"; then
+        MSM_VERSION=8974
+        BUILD_UNIFIED_CODE=false
+        BUILD_JPEG=true
+else
+	MSM_VERSION=
+	BUILD_UNIFIED_CODE=false
+	BUILD_JPEG=false
+fi
+
+AC_ARG_WITH([dlog],	
+      AC_HELP_STRING([--with-dlog],
+         [enable dlog, building HLOS systems which use dlog]))
+
+if (test "x${with_dlog}" = "xyes"); then
+      AC_DEFINE(ENABLE_USEDLOG, 1, [Define if HLOS systems uses dlog])
+      PKG_CHECK_MODULES(DLOG, [dlog])	
+      AC_SUBST(DLOG_CFLAGS)
+      AC_SUBST(DLOG_LIBS)
+fi
+
+AM_CONDITIONAL(USE_DLOG, test "x${with_dlog}" = "xyes")
+
+AC_ARG_ENABLE([debug],
+	[AS_HELP_STRING([--enable-debug],[Build with debug flags and options])],
+	[DEBUG=$enableval],
+	[DEBUG=no]
+)
+if test "x$DEBUG" = "xyes"; then
+	DEBUG_CPPFLAGS="${DEBUG_CPPFLAGS} -DLOG_DEBUG -DLOG_TAG=\"CameraService\""
+	DEBUG_CFLAGS="${DEBUG_CFLAGS} -DLOG_DEBUG -DLOG_TAG=\"CameraService\" -g -O0"
+fi
+
+AC_SUBST([MSM_VERSION])
+AM_CONDITIONAL([MSM8974], [test "x$MSM_VERSION" = "x8974"])
+AM_CONDITIONAL([BUILD_UNIFIED_CODE], [test "x$BUILD_UNIFIED_CODE" = "xtrue"])
+AM_CONDITIONAL([BUILD_JPEG], [test "x$BUILD_JPEG" = "xtrue"])
+
+AC_OUTPUT([ \
+  Makefile \
+  QCamera2/stack/Makefile \
+  QCamera2/stack/mm-camera-interface/Makefile \
+  QCamera2/stack/mm-jpeg-interface/Makefile \
+  QCamera2/stack/mm-camera-test/Makefile \
+  mm-image-codec/Makefile
+])
+
diff --git a/mm-image-codec/Makefile.am b/mm-image-codec/Makefile.am
new file mode 100755
index 0000000..85ad941
--- /dev/null
+++ b/mm-image-codec/Makefile.am
@@ -0,0 +1,23 @@
+ACLOCAL_AMFLAGS = -I m4
+
+#libqomx_core.so
+lib_LTLIBRARIES = libqomx_core.la
+
+libqomx_core_la_CFLAGS = -fPIC
+
+libqomx_core_la_CFLAGS += -g -O0
+
+libqomx_core_la_CFLAGS += -I ../qexif
+libqomx_core_la_CFLAGS += -I qomx_core
+libqomx_core_la_CFLAGS += -I ../android-includes
+
+libqomx_core_la_SOURCES = qomx_core/qomx_core.c
+
+#LOCAL_SHARED_LIBRARIES := libcutils libdl
+libqomx_core_la_LDFLAGS = -shared
+libqomx_core_la_LIBADD = -ldl -lrt
+
+if USE_DLOG
+libqomx_core_la_CFLAGS += -DUSE_DLOG @DLOG_CFLAGS@	
+libqomx_core_la_LIBADD += @DLOG_LIBS@
+endif
diff --git a/mm-image-codec/configure.ac b/mm-image-codec/configure.ac
new file mode 100755
index 0000000..f996e0c
--- /dev/null
+++ b/mm-image-codec/configure.ac
@@ -0,0 +1,61 @@
+#                                               -*- Autoconf -*-
+# configure.ac -- Autoconf script for mm-image-codec
+#
+
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ(2.61)
+AC_INIT([mm-image-codec],1.0.0)
+
+AM_INIT_AUTOMAKE([-Wall -Werror gnu foreign subdir-objects])
+AM_MAINTAINER_MODE
+
+AC_CONFIG_HEADER([config.h])
+AC_CONFIG_MACRO_DIR([m4])
+
+# Checks for programs.
+AC_PROG_CC
+AC_PROG_CPP
+AC_PROG_CXX
+AM_PROG_CC_C_O
+AC_PROG_LIBTOOL
+AC_PROG_AWK
+AC_PROG_INSTALL
+AC_PROG_LN_S
+AC_PROG_MAKE_SET
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_TYPE_SIZE_T
+AC_TYPE_SSIZE_T
+AC_TYPE_UINT16_T
+AC_TYPE_UINT32_T
+AC_TYPE_UINT64_T
+AC_TYPE_UINT8_T
+
+AC_ARG_WITH([dlog],	
+      AC_HELP_STRING([--with-dlog],
+         [enable dlog, building HLOS systems which use dlog]))
+
+if (test "x${with_dlog}" = "xyes"); then
+      AC_DEFINE(ENABLE_USEDLOG, 1, [Define if HLOS systems uses dlog])
+      PKG_CHECK_MODULES(DLOG, [dlog])	
+      AC_SUBST(DLOG_CFLAGS)
+      AC_SUBST(DLOG_LIBS)
+fi
+
+AM_CONDITIONAL(USE_DLOG, test "x${with_dlog}" = "xyes")
+
+AC_CHECK_TOOL(OBJCOPY, objcopy, false)
+
+AC_ARG_WITH([sanitized-headers],
+	[AS_HELP_STRING([--with-sanitized-headers=DIR],[location of the sanitized Linux kernel headers])],
+	[CFLAGS="$CFLAGS -I $withval"])
+
+AC_ARG_WITH([omx-includes],
+        [AS_HELP_STRING([--with-omx-includes=DIR],[location of OMX interface headers])],
+        [CPPFLAGS="$CPPFLAGS -I$withval"])
+
+AC_CONFIG_FILES([ \
+    Makefile
+   ])
+AC_OUTPUT
diff --git a/mm-image-codec/qomx_core/qomx_core.c b/mm-image-codec/qomx_core/qomx_core.c
old mode 100644
new mode 100755
index 2aa3607..7987e15
--- a/mm-image-codec/qomx_core/qomx_core.c
+++ b/mm-image-codec/qomx_core/qomx_core.c
@@ -28,7 +28,15 @@ IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/
 #define LOG_NDEBUG 0
 #define LOG_NIDEBUG 0
 #define LOG_TAG "qomx_image_core"
+
+#include <stdint.h>
+
+#ifdef _ANDROID_
 #include <utils/Log.h>
+#else
+#define ALOGE(fmt, args...) fprintf(stderr, fmt"\n", ##args)
+#define ALOGD(fmt, args...) do {} while(0)
+#endif
 
 #include "qomx_core.h"
 
-- 
1.9.1

