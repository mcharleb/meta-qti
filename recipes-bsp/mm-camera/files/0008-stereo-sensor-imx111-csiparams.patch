diff --git a/server/hardware/sensor/qs_imx111/qs_imx111_u.c b/server/hardware/sensor/qs_imx111/qs_imx111_u.c
index 382c970..164761b 100644
--- a/server/hardware/sensor/qs_imx111/qs_imx111_u.c
+++ b/server/hardware/sensor/qs_imx111/qs_imx111_u.c
@@ -62,14 +62,12 @@ static sensor_crop_parms_t qs_imx111_cropinfo[] = {
   {0, 0, 0, 0},/*RES4 3D FULL*/
 };
 
-#ifdef CAMERA_CONF_3D
 static uint32_t qs_imx111_mode_3d_res[] = {
   MSM_SENSOR_RES_4,/*SENSOR_MODE_SNAPSHOT*/
   MSM_SENSOR_RES_4,/*SENSOR_MODE_RAW_SNAPSHOT*/
   MSM_SENSOR_RES_3,/*SENSOR_MODE_PREVIEW*/
   MSM_SENSOR_RES_3,/*SENSOR_MODE_VIDEO*/
 };
-#endif
 
 static uint32_t qs_imx111_mode_res[SENSOR_MODE_INVALID] = {
   MSM_SENSOR_RES_FULL,/*SENSOR_MODE_SNAPSHOT*/
@@ -163,30 +161,29 @@ static uint8_t qs_imx111_3d_lsc_right_calib[884];
 
 #endif
 
-#if 0
-static struct msm_camera_csi_params qs_imx111_csi0_params = {
-  .data_format = CSI_10BIT,
-  .lane_cnt    = 2,
-  .lane_assign = 0x9c,
-  .dpcm_scheme = 0,
-  .settle_cnt  = 0x14,
-};
-
-static struct msm_camera_csi_params qs_imx111_csi1_params = {
-  .data_format = CSI_10BIT,
-  .lane_cnt    = 2,
-  .lane_assign = 0xe4,
-  .dpcm_scheme = 0,
-  .settle_cnt  = 0x14,
+static struct csi_lane_params_t qs_imx111_csi_lane_params[] = {
+	{
+		.csi_lane_assign = 0x9c,
+		.csi_lane_mask = 0x9,
+		.csi_if = 1,
+		.csi_phy_sel = 1, 
+		.csid_core[0] = 0,
+		.csid_core[1] = 1,
+	},
+	{
+		.csi_lane_assign = 0xe4,
+		.csi_lane_mask = 0x3,
+		.csi_if = 1,
+		.csi_phy_sel = 1, 
+		.csid_core[0] = 1,
+		.csid_core[1] = 0,
+	},
 };
-#endif
 
 static struct msm_camera_csid_vc_cfg qs_imx111_cid_cfg[] = {
     {0, CSI_RAW10, CSI_DECODE_10BIT},
     {1, CSI_EMBED_DATA, CSI_DECODE_8BIT},
-#if 0
-    {2, CSI_RESERVED_DATA, CSI_DECODE_8BIT},
-#endif
+    {2, CSI_RESERVED_DATA_0, CSI_DECODE_8BIT},
 };
 
 static struct msm_camera_csi2_params qs_imx111_csi_params[2] = {
@@ -226,12 +223,19 @@ static struct msm_camera_csi2_params qs_imx111_csi_params[2] = {
     },
 };
 
-static struct msm_camera_csi2_params *qs_imx111_csi_params_array[] = {
-    &qs_imx111_csi_params[0],
-    &qs_imx111_csi_params[0],
-    &qs_imx111_csi_params[0],
-    &qs_imx111_csi_params[0],
-    &qs_imx111_csi_params[0],
+static struct msm_camera_csi2_params* qs_imx111_csi2_0_params_array[] = {
+    	&qs_imx111_csi_params[0],
+    	&qs_imx111_csi_params[0],
+    	&qs_imx111_csi_params[0],
+    	&qs_imx111_csi_params[0],
+    	&qs_imx111_csi_params[0],
+};
+static struct msm_camera_csi2_params* qs_imx111_csi2_1_params_array[] = {
+    	&qs_imx111_csi_params[1],
+    	&qs_imx111_csi_params[1],
+    	&qs_imx111_csi_params[1],
+    	&qs_imx111_csi_params[1],
+    	&qs_imx111_csi_params[1],
 };
 
 #if 0
@@ -453,6 +457,71 @@ static void  qs_imx111_get_lsc_right_calibration(void *sctrl)
 
 #endif
 
+/*===========================================================================
+ * FUNCTION    - sensor_util_get_csi_params -
+ *
+ * DESCRIPTION:
+ *==========================================================================*/
+extern void sensor_dump_csi_params(sensor_csi_params_t  *csi_param);
+int8_t qs_imx111_sensor_util_get_csi_params(void *sctrl)
+{
+  struct sensor_cfg_data cfg;
+  sensor_ctrl_t *ctrl = (sensor_ctrl_t *) sctrl;
+  struct csi_lane_params_t *csi_lane_params = NULL;
+  int index = 0;
+  int i=0;
+ 
+  CDBG("%s enter\n", __func__);
+
+  if (ctrl->sfd <= 0)
+    return FALSE;
+
+  /* Ignore IOCTL call, instead get params locally */
+#if 0
+  cfg.cfgtype = CFG_GET_CSI_PARAMS;
+  if (ioctl(ctrl->sfd, MSM_CAM_IOCTL_SENSOR_IO_CFG, &cfg) < 0) {
+    CDBG("%s failed %d\n", __func__, __LINE__);
+    return 0;
+  }
+#endif
+
+  /*TBD:  this should be copied element by element */
+  ctrl->sensor.sensor_csi3d_params[0].csi_lane_params = qs_imx111_csi_lane_params[0];
+  ctrl->sensor.sensor_csi3d_params[1].csi_lane_params = qs_imx111_csi_lane_params[1];
+
+  for (i=0; i<2; i++) {
+  	CDBG("%s sensor_csi3d_params[%d]: (%p)\n", __func__, i, 
+					&ctrl->sensor.sensor_csi3d_params[i]);
+  	CDBG("%s sensor_csi3d_params[%d].csi_lane_params: (%p)\n", __func__, i, 
+					&ctrl->sensor.sensor_csi3d_params[i].csi_lane_params);
+  }
+
+  for (i=0; i<2; i++) {
+  /*	  ctrl->sensor.sensor_csi3d_params[i].csi_lane_params.csi_lane_assign = qs_imx111_csi_lane_params[i].csi_lane_assign;
+  	  ctrl->sensor.sensor_csi3d_params[i].csi_lane_params.csi_lane_mask   = qs_imx111_csi_lane_params[i].csi_lane_mask;
+  	  ctrl->sensor.sensor_csi3d_params[i].csi_lane_params.csi_phy_sel     = qs_imx111_csi_lane_params[i].csi_phy_sel;
+  	  ctrl->sensor.sensor_csi3d_params[i].csi_lane_params.csi_if          = qs_imx111_csi_lane_params[i].csi_if;
+  	  ctrl->sensor.sensor_csi3d_params[i].csi_lane_params.csi_lane_assign = qs_imx111_csi_lane_params[i].csi_lane_assign;
+      for (index = 0; index < qs_imx111_csi_lane_params[i].csi_if; index ++)
+  	  	ctrl->sensor.sensor_csi3d_params[i].csi_lane_params.csid_core[index] = qs_imx111_csi_lane_params[i].csid_core[index];
+*/
+	  CDBG("%s csi_params for csi%d:\n",__func__, i);
+	  sensor_dump_csi_params(&ctrl->sensor.sensor_csi3d_params[i]);
+#if 0
+	  csi_lane_params = &ctrl->sensor.sensor_csi3d_params[i].csi_lane_params;
+	  CDBG("%s csi lane params, lane assign = 0x%x, lane mask = 0x%x, csi = %d\n",
+    		__func__, csi_lane_params->csi_lane_assign, csi_lane_params->csi_lane_mask,
+		    csi_lane_params->csi_if);
+      for (index = 0; index < csi_lane_params->csi_if; index ++)
+      		CDBG("%s csi_lane_params, csid_core[%d] = %d\n", __func__,
+        	index, csi_lane_params->csid_core[index]);
+#endif
+  }
+	CDBG("%s exit\n", __func__);
+  return TRUE;
+}
+
+
 static sensor_function_table_t qs_imx111_func_tbl = {
   .sensor_set_op_mode = sensor_util_set_op_mode,
   .sensor_get_mode_aec_info = sensor_util_get_mode_aec_info,
@@ -475,12 +544,13 @@ static sensor_function_table_t qs_imx111_func_tbl = {
   .sensor_lensshading_left_calib = qs_imx111_get_lsc_left_calibration,
   .sensor_lensshading_right_calib = qs_imx111_get_lsc_right_calibration,
 #endif
-
- .sensor_get_lens_info = sensor_get_lens_info,
+  .sensor_get_cur_fps = sensor_util_get_cur_fps,
+  .sensor_get_lens_info = sensor_get_lens_info,
   .sensor_get_max_supported_hfr_mode = sensor_util_get_max_supported_hfr_mode,
   .sensor_set_start_stream = sensor_util_set_start_stream,
   .sensor_set_stop_stream = sensor_util_set_stop_stream,
-  .sensor_get_csi_params = sensor_util_get_csi_params,
+  .sensor_get_csi_params = qs_imx111_sensor_util_get_csi_params,
+  /*.sensor_get_csi_params = sensor_util_get_csi_params,*/
 };
 
 int8_t qs_imx111_process_start(void *ctrl)
@@ -489,13 +559,13 @@ int8_t qs_imx111_process_start(void *ctrl)
   sctrl->fn_table = &qs_imx111_func_tbl;
   sctrl->sensor.inputformat = qs_imx111_inputformat;
   sctrl->sensor.crop_info = qs_imx111_cropinfo;
-#ifdef CONF_CAMERA_3D
-  if (sctrl->sensor.cam_mode == CAMERA_MODE_3D)
+  sctrl->sensor.mode_3d = 1;
+  if (sctrl->sensor.mode_3d == 1 )
     sctrl->sensor.mode_res = qs_imx111_mode_3d_res;
   else
-#endif
     sctrl->sensor.mode_res = qs_imx111_mode_res;
 
+
 #ifdef CONF_CAMERA_3D
   sctrl->cali_data_3d = &qs_imx111_3d_cali_data;
 
@@ -523,7 +593,9 @@ int8_t qs_imx111_process_start(void *ctrl)
   sctrl->sensor.sensor_csi_params.csic_params = &qs_imx111_csi_params_array[0];
 #endif
 
-  sctrl->sensor.sensor_csi_params.csi2_params = &qs_imx111_csi_params_array[0];
+  /*sctrl->sensor.sensor_csi_params.csi2_params = &qs_imx111_csi_params_array[0];*/
+  sctrl->sensor.sensor_csi3d_params[0].csi2_params = &qs_imx111_csi2_0_params_array[0];
+  sctrl->sensor.sensor_csi3d_params[1].csi2_params = &qs_imx111_csi2_1_params_array[0];
 
   sensor_util_get_output_info(sctrl);
 
@@ -531,7 +603,6 @@ int8_t qs_imx111_process_start(void *ctrl)
   sctrl->sensor.op_mode = SENSOR_MODE_PREVIEW;
 #endif
 
-
   sctrl->sensor.out_data.sensor_output.connection_mode = SENSOR_MIPI_CSI;
   sctrl->sensor.out_data.sensor_output.output_format = SENSOR_BAYER;
   sctrl->sensor.out_data.sensor_output.raw_output = SENSOR_10_BIT_DIRECT;
