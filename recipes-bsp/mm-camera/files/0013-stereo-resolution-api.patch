diff --git a/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.c b/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.c
index 217c984..45b394e 100644
--- a/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.c
+++ b/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.c
@@ -58,15 +58,18 @@ typedef enum {
 	CAM_STATE_EXIT,
 } cam_state_t;
 
-#if 0
+Camera_Resolution current_preview_video_resolution = STEREO_1280_960; 
+
 typedef struct{
     Camera_Resolution cs_id;
     uint16_t width;
     uint16_t  height;
     char * name;
     char * str_name;
+	uint32_t bufSizeInBytes;
 } PREVIEW_DIMENSION_TBL_T;
 
+#if 0
 typedef struct {
   White_Balance_modes wb_id;
   char * wb_name;
@@ -96,19 +99,22 @@ typedef struct {
   Camera_Sharpness_changes sharpness_change;
   char *sharpness_change_name;
 } SHARPNESS_TBL_T;
-
+#endif
 const PREVIEW_DIMENSION_TBL_T preview_video_dimension_tbl[] = {
-   { SQCIF, SQCIF_WIDTH, SQCIF_HEIGHT, "SQCIF",  "Preview/Video Resolution: SQCIF <128x96>"},
-   {  QCIF,  QCIF_WIDTH,  QCIF_HEIGHT,  "QCIF",  "Preview/Video Resolution: QCIF <176x144>"},
-   {  QVGA,  QVGA_WIDTH,  QVGA_HEIGHT,  "QVGA",  "Preview/Video Resolution: QVGA <320x240>"},
-   {   CIF,   CIF_WIDTH,   CIF_HEIGHT,   "CIF",  "Preview/Video Resolution: CIF <352x288>"},
-   {   VGA,   VGA_WIDTH,   VGA_HEIGHT,   "VGA",  "Preview/Video Resolution: VGA <640x480>"},
-   {  WVGA,  WVGA_WIDTH,  WVGA_HEIGHT,  "WVGA",  "Preview/Video Resolution: WVGA <800x480>"},
-   {  SVGA,  SVGA_WIDTH,  SVGA_HEIGHT,  "SVGA",  "Preview/Video Resolution: SVGA <800x600>"},
-   {   XGA,   XGA_WIDTH,   XGA_HEIGHT,    "XGA", "Preview/Video Resolution: XGA <1024x768>"},
-   { HD720, HD720_WIDTH, HD720_HEIGHT,  "HD720", "Preview/Video Resolution: HD720 <1280x720>"},
+   { SQCIF, SQCIF_WIDTH, SQCIF_HEIGHT, "SQCIF",  "Preview/Video Resolution: SQCIF <128x96>", 41472},
+   {  QCIF,  QCIF_WIDTH,  QCIF_HEIGHT,  "QCIF",  "Preview/Video Resolution: QCIF <176x144>", 41472},
+   {  QVGA,  QVGA_WIDTH,  QVGA_HEIGHT,  "QVGA",  "Preview/Video Resolution: QVGA <320x240>", 115200},
+   {   CIF,   CIF_WIDTH,   CIF_HEIGHT,   "CIF",  "Preview/Video Resolution: CIF <352x288>", 152064},
+   {   VGA,   VGA_WIDTH,   VGA_HEIGHT,   "VGA",  "Preview/Video Resolution: VGA <640x480>", 576000},
+   {  WVGA,  WVGA_WIDTH,  WVGA_HEIGHT,  "WVGA",  "Preview/Video Resolution: WVGA <800x480>", 576000},
+   {  SVGA,  SVGA_WIDTH,  SVGA_HEIGHT,  "SVGA",  "Preview/Video Resolution: SVGA <800x600>", 720000},
+   { STEREO_820_308,   820,   308,  "Stereo_820_308", "Preview/Video Resolution: Stereo <820x308>", 384384},
+   {   XGA,   XGA_WIDTH,   XGA_HEIGHT,    "XGA", "Preview/Video Resolution: XGA <1024x768>", 1179648},
+   { HD720, HD720_WIDTH, HD720_HEIGHT,  "HD720", "Preview/Video Resolution: HD720 <1280x720>", 1382400},
+   { STEREO_1280_960,  1280,  960,  "Stereo_1280_960", "Preview/Video Resolution: Stereo <1280x960>", 1843200},
 };
 
+#if 0
 typedef struct {
   Camera_Brightness_changes bc_id;
   char * brightness_name;
@@ -369,7 +375,7 @@ struct v4l2_queryctrl zoom_queryctrl;
 struct v4l2_queryctrl sharpness_queryctrl;
 int zoom_level;
 
-Camera_Resolution Resolution;
+/*Camera_Resolution Resolution;*/
 int32_t g_camParmInfo_current_value = 0;
 extern unsigned long preview_frames_buf;
 extern void test_app_mmcamera_videoframe_callback(struct msm_frame *frame); // video_cam.c
@@ -423,7 +429,6 @@ static int set_video_op_mode(int fd, int opmode)
   return rc;
 }
 
-#if 0
 char * set_preview_video_dimension_tbl(Camera_Resolution cs_id, uint16_t * width, uint16_t * height)
 {
   unsigned int i;
@@ -440,6 +445,7 @@ char * set_preview_video_dimension_tbl(Camera_Resolution cs_id, uint16_t * width
   return ptr;
 }
 
+#if 0
 /*===========================================================================
  * FUNCTION     - increase_contrast -
  *
@@ -1599,17 +1605,16 @@ void system_dimension_init(int extendedmode)
   dimension->main_img_format = usr_main_format;
 
   if (preview_video_resolution_flag == 0) {
-#if 0
-    dimension->video_width = WVGA_WIDTH;
+    dimension->video_width = preview_video_dimension_tbl[current_preview_video_resolution].width;
     dimension->video_width = CEILING32(dimension->video_width);
-    input_display.user_input_display_width = WVGA_WIDTH;
-    input_display.user_input_display_height = WVGA_HEIGHT;
-    dimension->video_height = WVGA_HEIGHT;
-    dimension->orig_video_width = WVGA_WIDTH;
-    dimension->orig_video_height = WVGA_HEIGHT;
-    dimension->display_width = WVGA_WIDTH;
-    dimension->display_height = WVGA_HEIGHT;
-#endif
+    dimension->video_height = preview_video_dimension_tbl[current_preview_video_resolution].height;
+    input_display.user_input_display_width = dimension->video_width;
+    input_display.user_input_display_height = dimension->video_height;
+    dimension->orig_video_width = dimension->video_width;
+    dimension->orig_video_height = dimension->video_height;
+    dimension->display_width = dimension->video_width;
+    dimension->display_height = dimension->video_height;
+#if 0
     dimension->video_width = MP1_WIDTH;
     dimension->video_width = CEILING32(dimension->video_width);
     input_display.user_input_display_width = MP1_WIDTH;
@@ -1619,6 +1624,7 @@ void system_dimension_init(int extendedmode)
     dimension->orig_video_height = MP1_HEIGHT;
     dimension->display_width = MP1_WIDTH;
     dimension->display_height = MP1_HEIGHT;
+#endif
   } else {
     dimension->video_width = input_display.user_input_display_width;
     dimension->video_width = CEILING32(dimension->video_width);
@@ -1627,6 +1633,8 @@ void system_dimension_init(int extendedmode)
     dimension->orig_video_height = dimension->video_height;
     dimension->display_width = dimension->video_width;
     dimension->display_height = dimension->video_height;
+
+    current_preview_video_resolution = preview_video_resolution_flag;
   }
 
   current_fmt.type = bufType;
@@ -2783,7 +2791,6 @@ int preview_video_resolution (int preview_video_action_param) {
 ERROR:
   return -1;
 }
-
 /*===========================================================================
  * FUNCTION     - set_whitebalance -
  *
@@ -3260,9 +3267,83 @@ int v4l2_qcamlib_copy_preview_frame(uint8_t* dest_buf, void* src_vfb) {
 	return copy_v4l2_camframe_p(dest_buf, (struct v4l2_frame_buffer*)src_vfb);
 }
 
+Camera_Resolution v4l2_qcamlib_get_current_preview_video_resolution() {
+	return current_preview_video_resolution;
+}
+
+int v4l2_qcamlib_get_current_preview_video_dimensions(uint16_t* pHeight, uint16_t* pWidth) {
+	return v4l2_qcamlib_get_preview_video_dimensions(current_preview_video_resolution, pHeight, pWidth); 
+}
+
+int v4l2_qcamlib_get_preview_video_dimensions(int resolution, uint16_t* pHeight, uint16_t* pWidth) {
+  if(resolution < RESOLUTION_MIN || resolution > RESOLUTION_PREVIEW_VIDEO_MAX) {
+    CDBG_ERROR("%s: ERROR Invalid resolution %d \n", __func__, resolution);
+	return -1;
+  }
+		
+	if (pHeight == NULL || pWidth == NULL)
+		return -1; 
+	*pHeight = preview_video_dimension_tbl[resolution].height;
+	*pWidth = preview_video_dimension_tbl[resolution].width;
+	return 0;
+}
+
+char* v4l2_qcamlib_get_current_preview_video_resolution_name() {
+	return v4l2_qcamlib_get_preview_video_resolution_name(current_preview_video_resolution);
+}
+
+char* v4l2_qcamlib_get_preview_video_resolution_name(int resolution) {
+  if(resolution < RESOLUTION_MIN || resolution > RESOLUTION_PREVIEW_VIDEO_MAX) {
+    CDBG_ERROR("%s: ERROR Invalid resolution %d \n", __func__, resolution);
+	return -1;
+  }
+		
+	return preview_video_dimension_tbl[resolution].name;
+}
+
+char* v4l2_qcamlib_get_current_preview_video_resolution_description() {
+	return v4l2_qcamlib_get_preview_video_resolution_description(current_preview_video_resolution);
+}
+
+char* v4l2_qcamlib_get_preview_video_resolution_description(int resolution) {
+  if(resolution < RESOLUTION_MIN || resolution > RESOLUTION_PREVIEW_VIDEO_MAX) {
+    CDBG_ERROR("%s: ERROR Invalid resolution %d \n", __func__, resolution);
+	return -1;
+  }
+		
+	return preview_video_dimension_tbl[resolution].str_name;
+}
+
 uint32_t v4l2_qcamlib_get_preview_frame_buffer_size() {
 	/*return 576000;*/
-	return 1843200;
+	/*return 1843200;*/
+	return preview_video_dimension_tbl[current_preview_video_resolution].bufSizeInBytes;
+}
+
+int v4l2_qcamlib_set_preview_video_resolution(int new_resolution) {
+  char * resolution_name;
+
+  if(new_resolution < RESOLUTION_MIN || new_resolution > RESOLUTION_PREVIEW_VIDEO_MAX) {
+    CDBG_ERROR("%s: ERROR Invalid resolution %d \n", __func__, new_resolution);
+	return -1;
+  }
+		
+  resolution_name = (char*) set_preview_video_dimension_tbl(new_resolution,
+                      & input_display.user_input_display_width,
+                      & input_display.user_input_display_height);
+
+  if (resolution_name == NULL) {
+    CDBG_ERROR("%s: ERROR set_preview_dimension failed for resolution %d\n", __func__, new_resolution);
+    return -1; 
+  }
+
+  CDBG_ERROR("Selected preview/video resolution is %s\n", resolution_name);
+  CDBG_ERROR("Selected Preview Resolution: display_width = %d, display_height = %d\n",
+    input_display.user_input_display_width, input_display.user_input_display_height);
+
+  preview_video_resolution_flag = new_resolution;
+  return 0;
+
 }
 
 cam_format_t v4l2_qcamlib_get_preview_frame_format() {
diff --git a/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.h b/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.h
index 8861be0..a2f1d04 100644
--- a/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.h
+++ b/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.h
@@ -3,24 +3,39 @@
 
 #include <stdint.h>
 
+/* Initialize */
 int v4l2_qcamlib_init(int camera_id);
+
+/* Exit */
 int v4l2_qcamlib_exit();
+
+/* Start the Preview stream */
 int v4l2_qcamlib_start_preview();
+/* Stop the Preview stream */
 int v4l2_qcamlib_stop_preview();
+
+/* Take snapshot */
 int v4l2_qcamlib_take_yuv420_snapshot();
 
+/* Register(De) for preview frame callback */
 typedef void (*v4l2_preview_camframe_cb_t) (void* vb);
 int v4l2_qcamlib_register_preview_frame_callback(v4l2_preview_camframe_cb_t cb_ptr);
 int v4l2_qcamlib_deregister_preview_frame_callback();
 
 /*cam_format_t v4l2_qcamlib_get_preview_frame_format();*/
+
+/* Copy preview frame buffer */
 uint32_t v4l2_qcamlib_get_preview_frame_buffer_size();
 int v4l2_qcamlib_copy_preview_frame(uint8_t* dest_buf, void* src_vfb);
+
+/* Enable Display overlay */
 void v4l2_qcamlib_enable_display_overlay();
 
+/* Auto Exposure Control EV param */
 int v4l2_qcamlib_get_aec_exposure_value(int32_t* p_ev);
 int v4l2_qcamlib_set_aec_exposure_value(int32_t ev_abs);
 
+/* Disable Auto Exposure. Control Exposure params manually */
 typedef struct {
   int luma_target;
   int current_luma;
@@ -29,5 +44,77 @@ typedef struct {
   uint32_t linecount;
   uint32_t fps;
 } v4l2_qcamlib_sensor_aec_t;
+
 int v4l2_qcamlib_set_exposure_manual(v4l2_qcamlib_sensor_aec_t* aec_data); 
 
+/* Camera Resolution Control */
+#define SQCIF_WIDTH     128
+#define SQCIF_HEIGHT     96
+#define QCIF_WIDTH      176
+#define QCIF_HEIGHT     144
+#define QVGA_WIDTH      320
+#define QVGA_HEIGHT     240
+#define HD_THUMBNAIL_WIDTH      256
+#define HD_THUMBNAIL_HEIGHT     144
+#define CIF_WIDTH       352
+#define CIF_HEIGHT      288
+#define VGA_WIDTH       640
+#define VGA_HEIGHT      480
+#define WVGA_WIDTH      800
+#define WVGA_HEIGHT     480
+
+#define MP1_WIDTH      1280
+#define MP1_HEIGHT      960
+#define MP2_WIDTH      1600
+#define MP2_HEIGHT     1200
+#define MP3_WIDTH      2048
+#define MP3_HEIGHT     1536
+#define MP5_WIDTH      2592
+#define MP5_HEIGHT     1944
+
+#define SVGA_WIDTH      800
+#define SVGA_HEIGHT     600
+#define XGA_WIDTH      1024
+#define XGA_HEIGHT      768
+#define HD720_WIDTH    1280
+#define HD720_HEIGHT    720
+#define WXGA_WIDTH     1280
+#define WXGA_HEIGHT     768
+#define HD1080_WIDTH   1920
+#define HD1080_HEIGHT  1080
+
+typedef enum
+{
+  RESOLUTION_MIN         = 0,
+  SQCIF                  = RESOLUTION_MIN,
+  QCIF                   /*= 1*/,
+  QVGA                   /*= 2*/,
+  CIF                    /*= 3*/,
+  VGA                    /*= 4*/,
+  WVGA                   /*= 5*/,
+  SVGA                   /*= 6*/,
+  STEREO_820_308         /*= 82*/,
+  XGA                    /*= 7*/,
+  HD720                  /*= 8*/,
+  STEREO_1280_960        /*= 81*/,
+  RESOLUTION_PREVIEW_VIDEO_MAX = STEREO_1280_960,
+  WXGA                   /*= 9*/,
+  MP1                    /*= 10*/,
+  MP2                    /*= 11*/,
+  HD1080                 /*= 12*/,
+  MP3                    /*= 13*/,
+  MP5                    /*= 14*/,
+  RESOLUTION_MAX         = MP5,
+} Camera_Resolution;
+
+int v4l2_qcamlib_set_preview_video_resolution(int new_resolution);
+Camera_Resolution v4l2_qcamlib_get_current_preview_video_resolution();
+int v4l2_qcamlib_get_current_preview_video_dimensions(uint16_t* pHeight, uint16_t* pWidth);
+char* v4l2_qcamlib_get_current_preview_video_resolution_name();
+char* v4l2_qcamlib_get_current_preview_video_resolution_description();
+Camera_Resolution v4l2_qcamlib_get_preview_video_resolution(int resolution);
+int v4l2_qcamlib_get_preview_video_dimensions(int resolution, uint16_t* pHeight, uint16_t* pWidth);
+char* v4l2_qcamlib_get_preview_video_resolution_name(int resolution);
+char* v4l2_qcamlib_get_preview_video_resolution_description(int resolution);
+
+
diff --git a/apps/v4l2-qcamera-app/v4l2-qcamera-app.c b/apps/v4l2-qcamera-app/v4l2-qcamera-app.c
index 7dd56c4..692a66b 100644
--- a/apps/v4l2-qcamera-app/v4l2-qcamera-app.c
+++ b/apps/v4l2-qcamera-app/v4l2-qcamera-app.c
@@ -33,6 +33,7 @@
 #include "v4l2-qcamera-app-lib.h"
 
 #if 0
+/* Not required */
 #define VIDEO_BUFFER_SIZE       (PREVIEW_WIDTH * PREVIEW_HEIGHT * 3/2)
 #define THUMBNAIL_BUFFER_SIZE   (THUMBNAIL_WIDTH * THUMBNAIL_HEIGHT * 3/2)
 #define SNAPSHOT_BUFFER_SIZE    (PICTURE_WIDTH * PICTURE_HEIGHT * 3/2)
@@ -1751,6 +1752,13 @@ int set_snow_detection(int snow_param)
 }
 #endif
 
+void print_all_preview_video_resolutions() {
+	int resoln = RESOLUTION_MIN;
+	for (resoln = RESOLUTION_MIN; resoln <= RESOLUTION_PREVIEW_VIDEO_MAX; resoln++)
+		printf("\t\t: %d : %s\n", resoln, v4l2_qcamlib_get_preview_video_resolution_description(resoln));
+}
+
+int manual_exposure_set = 0;
 /*===========================================================================
  * FUNCTION    - main -
  *
@@ -1771,19 +1779,22 @@ int main(int argc, char **argv)
 #endif
 
   /* get v4l2 params - memory type etc */
-  while ((c = getopt(argc, argv, "mouhsfd:e:")) != -1) {
+  while ((c = getopt(argc, argv, "mouhsfiqd:e:r:")) != -1) {
     switch (c) {
       case 'd':
         yuvFrameDumpFactor = atoi(optarg);
-        /*use_overlay_fb_display_driver();*/
         break;
       case 'o':
         v4l2_qcamlib_enable_display_overlay(); 
-        /*use_overlay_fb_display_driver();*/
         break;
       case 'e':
         /*v4l2_qcamlib_set_exposure_value(atoi(optarg)); */
-        /*use_overlay_fb_display_driver();*/
+        break;
+      case 'm':
+        manual_exposure_set = 1;
+        break;
+      case 'r':
+		v4l2_qcamlib_set_preview_video_resolution(atoi(optarg));
         break;
     #if 0
       case 'm':
@@ -1826,6 +1837,9 @@ int main(int argc, char **argv)
         printf("-d <factor> :   Dump Frames with factor  \n");
         printf("            :   <n>: Dump mod(n) frames  \n");
         printf("            :   <1>: Dump all frames  \n");
+        printf("-q          :   Manual exposure control  \n");
+        printf("-r <resoln> :   Set Preview/Video resolution  \n");
+		print_all_preview_video_resolutions();
         exit(0);
     }
   }
@@ -2220,6 +2234,7 @@ void test_v4l2_preview_cb_fn(void* src_vb) {
     frameCntp++;
 
 	/* Test exposure control api */
+	if(manual_exposure_set)
 	dummy_exposure_control(frameCntp);
 
 	/* Dump selected frames */
diff --git a/apps/v4l2-qcamera-app/v4l2_cam.h b/apps/v4l2-qcamera-app/v4l2_cam.h
index 162f94b..0456835 100644
--- a/apps/v4l2-qcamera-app/v4l2_cam.h
+++ b/apps/v4l2-qcamera-app/v4l2_cam.h
@@ -83,62 +83,6 @@ typedef enum
 #define BASE_OFFSET_NUM  ('Z' - 'A' + 2)
 #define PAD_TO_WORD(a)  (((a)+3)&~3)
 
-#define SQCIF_WIDTH     128
-#define SQCIF_HEIGHT     96
-#define QCIF_WIDTH      176
-#define QCIF_HEIGHT     144
-#define QVGA_WIDTH      320
-#define QVGA_HEIGHT     240
-#define HD_THUMBNAIL_WIDTH      256
-#define HD_THUMBNAIL_HEIGHT     144
-#define CIF_WIDTH       352
-#define CIF_HEIGHT      288
-#define VGA_WIDTH       640
-#define VGA_HEIGHT      480
-#define WVGA_WIDTH      800
-#define WVGA_HEIGHT     480
-
-#define MP1_WIDTH      1280
-#define MP1_HEIGHT      960
-#define MP2_WIDTH      1600
-#define MP2_HEIGHT     1200
-#define MP3_WIDTH      2048
-#define MP3_HEIGHT     1536
-#define MP5_WIDTH      2592
-#define MP5_HEIGHT     1944
-
-#define SVGA_WIDTH      800
-#define SVGA_HEIGHT     600
-#define XGA_WIDTH      1024
-#define XGA_HEIGHT      768
-#define HD720_WIDTH    1280
-#define HD720_HEIGHT    720
-#define WXGA_WIDTH     1280
-#define WXGA_HEIGHT     768
-#define HD1080_WIDTH   1920
-#define HD1080_HEIGHT  1080
-
-typedef enum
-{
-  RESOLUTION_MIN         = 1,
-  SQCIF                  = RESOLUTION_MIN,
-  QCIF                   = 2,
-  QVGA                   = 3,
-  CIF                    = 4,
-  VGA                    = 5,
-  WVGA                   = 6,
-  SVGA                   = 7,
-  XGA                    = 8,
-  HD720                  = 9,
-  RESOLUTION_PREVIEW_VIDEO_MAX = HD720,
-  WXGA                   = 10,
-  MP1                    = 11,
-  MP2                    = 12,
-  HD1080                 = 13,
-  MP3                    = 14,
-  MP5                    = 15,
-  RESOLUTION_MAX         = MP5,
-} Camera_Resolution;
 
 typedef enum {
   WHITE_BALANCE_AUTO         = 1,
