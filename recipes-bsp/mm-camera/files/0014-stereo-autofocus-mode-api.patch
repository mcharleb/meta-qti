diff --git a/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.c b/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.c
index 45b394e..7e6b9ff 100644
--- a/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.c
+++ b/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.c
@@ -3350,6 +3350,36 @@ cam_format_t v4l2_qcamlib_get_preview_frame_format() {
 	return usr_prev_format;
 }
 
+int v4l2_qcamlib_set_auto_focus_mode (int af_mode)
+{
+  struct v4l2_queryctrl queryctrl;
+  struct v4l2_control control;
+
+  memset (&queryctrl, 0, sizeof (queryctrl));
+  queryctrl.id = MSM_V4L2_PID_FOCUS_MODE;
+
+  if (-1 == ioctl (camfd, VIDIOC_QUERYCTRL, &queryctrl)) {
+    if (errno != EINVAL) {
+      perror ("VIDIOC_QUERYCTRL");
+      exit (EXIT_FAILURE);
+    } else {
+      printf ("V4L2_CID_FOCUS_ABSOLUTE is not supported\n");
+    }
+  } else if (queryctrl.flags & V4L2_CTRL_FLAG_DISABLED) {
+      printf ("V4L2_CID_FOCUS_ABSOLUTE is not supported\n");
+  } else {
+    memset (&control, 0, sizeof (control));
+    control.id = MSM_V4L2_PID_FOCUS_MODE;
+    control.value = af_mode;
+
+    if (-1 == ioctl (camfd, VIDIOC_S_CTRL, &control)) {
+      perror ("VIDIOC_S_CTRL");
+      return -1;
+    }
+  }
+  return 0;
+}
+
 #if LIB_TEST_V4L2_PREVIEW_CALLBACK 
 uint8_t* test_buf = NULL;
 
diff --git a/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.h b/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.h
index a2f1d04..837f325 100644
--- a/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.h
+++ b/apps/v4l2-qcamera-app/v4l2-qcamera-app-lib.h
@@ -107,14 +107,31 @@ typedef enum
   RESOLUTION_MAX         = MP5,
 } Camera_Resolution;
 
-int v4l2_qcamlib_set_preview_video_resolution(int new_resolution);
+int		v4l2_qcamlib_set_preview_video_resolution(int new_resolution);
+
 Camera_Resolution v4l2_qcamlib_get_current_preview_video_resolution();
-int v4l2_qcamlib_get_current_preview_video_dimensions(uint16_t* pHeight, uint16_t* pWidth);
-char* v4l2_qcamlib_get_current_preview_video_resolution_name();
-char* v4l2_qcamlib_get_current_preview_video_resolution_description();
-Camera_Resolution v4l2_qcamlib_get_preview_video_resolution(int resolution);
-int v4l2_qcamlib_get_preview_video_dimensions(int resolution, uint16_t* pHeight, uint16_t* pWidth);
-char* v4l2_qcamlib_get_preview_video_resolution_name(int resolution);
-char* v4l2_qcamlib_get_preview_video_resolution_description(int resolution);
+int 	v4l2_qcamlib_get_current_preview_video_dimensions(uint16_t* pHeight, uint16_t* pWidth);
+char* 	v4l2_qcamlib_get_current_preview_video_resolution_name();
+char* 	v4l2_qcamlib_get_current_preview_video_resolution_description();
 
+Camera_Resolution v4l2_qcamlib_get_preview_video_resolution(int resolution);
+int 	v4l2_qcamlib_get_preview_video_dimensions(int resolution, uint16_t* pHeight, uint16_t* pWidth);
+char* 	v4l2_qcamlib_get_preview_video_resolution_name(int resolution);
+char* 	v4l2_qcamlib_get_preview_video_resolution_description(int resolution);
+
+/* Auto focus mode, used for CAMERA_PARM_AF_MODE */
+/*
+typedef enum {
+  AF_MODE_UNCHANGED = -1,
+  AF_MODE_NORMAL    = 0,
+  AF_MODE_MACRO,
+  AF_MODE_AUTO,
+  AF_MODE_CAF,
+  AF_MODE_INFINITY,
+  AF_MODE_MAX
+} v4l2_qcamlib_af_mode_t;
+*/
+
+/* Set Auto Focus mode */
+int v4l2_qcamlib_set_auto_focus_mode (int af_mode);
 
diff --git a/apps/v4l2-qcamera-app/v4l2-qcamera-app.c b/apps/v4l2-qcamera-app/v4l2-qcamera-app.c
index 692a66b..2c362ac 100644
--- a/apps/v4l2-qcamera-app/v4l2-qcamera-app.c
+++ b/apps/v4l2-qcamera-app/v4l2-qcamera-app.c
@@ -2237,6 +2237,9 @@ void test_v4l2_preview_cb_fn(void* src_vb) {
 	if(manual_exposure_set)
 	dummy_exposure_control(frameCntp);
 
+	if(frameCntp == 500)
+	v4l2_qcamlib_set_auto_focus_mode(4); /*(AF_MODE_INFINITY);*/
+
 	/* Dump selected frames */
 
 		/*v4l2_qcamlib_copy_preview_frame(test_buf, vb); */
diff --git a/server/core/config/config_proc_ctrlcmd.c b/server/core/config/config_proc_ctrlcmd.c
index dfd6e45..358034e 100644
--- a/server/core/config/config_proc_ctrlcmd.c
+++ b/server/core/config/config_proc_ctrlcmd.c
@@ -5630,6 +5630,11 @@ int config_proc_set_ctrl_cmd(void *parm1, void *parm2, int *cmdPending)
       ctrlCmd->status = ret;
       break;
 
+    case MSM_V4L2_PID_FOCUS_MODE:
+      *(int *)ctrlCmd->value = v4l2_ctrl->value;
+      ret = config_proc_CAMERA_SET_PARM_AF_MODE(ctrl, ctrlCmd);
+      ctrlCmd->status = ret;
+      break;
     default: {
         ret = TRUE;
         ctrlCmd->status = CAM_CTRL_SUCCESS;
