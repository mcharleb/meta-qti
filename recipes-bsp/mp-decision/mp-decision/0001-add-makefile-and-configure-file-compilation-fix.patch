From b9916a6bc12c2018db7d62235ae9978f630fcc3b Mon Sep 17 00:00:00 2001
From: Suraj Swami <sswami@qti.qualcomm.com>
Date: Fri, 24 Apr 2015 17:38:30 -0700
Subject: [PATCH] add makefile and configure file compilation fix

---
 Makefile.am      |   22 +++++++++++++
 configure.ac     |   93 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 decision-cores.c |    8 ++---
 decision.c       |   80 +++++++++++++++++++++++++++++++++++-----------
 4 files changed, 179 insertions(+), 24 deletions(-)
 create mode 100644 Makefile.am
 create mode 100644 configure.ac

diff --git a/Makefile.am b/Makefile.am
new file mode 100644
index 0000000..792bfef
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,22 @@
+
+ACLOCAL_AMFLAGS = -I m4
+
+bin_PROGRAMS = mpdecision
+mpdecision_CFLAGS = -O2
+mpdecision_CFLAGS += -g
+mpdecision_CFLAGS += -Wno-all
+mpdecision_CFLAGS += -Wno-error
+mpdecision_CFLAGS += -Wno-unused-parameter
+mpdecision_CFLAGS += -I .
+
+# source to compile
+mpdecision_SOURCES = decision.c
+mpdecision_SOURCES += decision-cores.c
+# LDFLAGS
+mpdecision_LDADD = -lpthread
+
+#if USE_MPCTL_SOCKET
+#mpdecision_CFLAGS += -DMPCTL_SERVER
+#mpdecision_LDADD += -ldl
+#mpdecision_LDADD += ../mp-ctl/libqc-mpctl.la
+#endif
diff --git a/configure.ac b/configure.ac
new file mode 100644
index 0000000..271eb4a
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,93 @@
+
+AC_PREREQ(2.61)
+
+AC_INIT([mpdecision],1.0.0)
+
+AM_INIT_AUTOMAKE([-Wall -Wno-error foreign])
+
+AM_MAINTAINER_MODE
+
+AC_CONFIG_HEADER([config.h])
+AC_CONFIG_MACRO_DIR([m4])
+
+# Checks for programs.
+AC_PROG_CC
+AC_PROG_CPP
+AC_PROG_CXX
+AM_PROG_CC_C_O
+AC_PROG_LIBTOOL
+AC_PROG_AWK
+AC_PROG_INSTALL
+AC_PROG_LN_S
+AC_PROG_MAKE_SET
+
+AC_ARG_WITH([sanitized-headers],
+        [AS_HELP_STRING([--with-sanitized-headers=DIR],[location of the sanitized Linux kernel headers])],
+        [CFLAGS="${CFLAGS} -I$withval"])
+
+AC_ARG_WITH([additional-includes],
+	[AS_HELP_STRING([--with-additional-includes=DIR],[location of additional headers])],
+	[CFLAGS="${CFLAGS} -I$withval"])
+
+
+
+AC_SUBST(CFLAGS)
+
+AC_ARG_WITH([glib],
+      AC_HELP_STRING([--with-glib],
+         [enable glib, building HLOS systems which use glib]))
+
+if (test "x${with_glib}" = "xyes"); then
+	AC_DEFINE(ENABLE_USEGLIB, 1, [Define if HLOS systems uses glib])
+	PKG_CHECK_MODULES(GTHREAD, gthread-2.0 >= 2.16, dummy=yes,
+				AC_MSG_ERROR(GThread >= 2.16 is required))
+	PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.16, dummy=yes,
+				AC_MSG_ERROR(GLib >= 2.16 is required))
+	GLIB_CFLAGS="$GLIB_CFLAGS $GTHREAD_CFLAGS"
+	GLIB_LIBS="$GLIB_LIBS $GTHREAD_LIBS"
+
+	AC_SUBST(GLIB_CFLAGS)
+	AC_SUBST(GLIB_LIBS)
+fi
+
+AC_ARG_ENABLE([target-msm8960],
+	AC_HELP_STRING([--enable-target-msm8960],
+		[Enable conditional compile for target msm8960 [default=no]]),
+	[target_msm8960="${enableval}"],
+	target_msm8960=no)
+
+AC_ARG_ENABLE([target-msm8610],
+	AC_HELP_STRING([--enable-target-msm8610],
+		[Enable conditional compile for target msm8610 [default=no]]),
+	[target_msm8610="${enableval}"],
+	target_msm8600=no)
+
+AC_ARG_ENABLE([target-msm8226],
+	AC_HELP_STRING([--enable-target-msm8226],
+		[Enable conditional compile for target msm8226 [default=no]]),
+	[target_msm8226="${enableval}"],
+	target_msm8226=no)
+
+AC_ARG_ENABLE([target-msm8974],
+	AC_HELP_STRING([--enable-target-msm8974],
+		[Enable conditional compile for target msm8974 [default=no]]),
+	[target_msm8974="${enableval}"],
+	target_msm8974=no)
+
+AC_ARG_ENABLE([target-msm8916],
+	AC_HELP_STRING([--enable-target-msm8916],
+		[Enable conditional compile for target msm8916 [default=no]]),
+	[target_msm8916="${enableval}"],
+	target_msm8916=no)
+
+# Comment out MPCTL. Enable it only if Perflock is needed which is part of android-perf repo
+#AM_CONDITIONAL(USE_MPCTL_SOCKET, test "x${target_msm8974}" = "xyes")
+#AM_CONDITIONAL(USE_MPCTL_SOCKET, test "x${target_msm8610}" = "xyes")
+#AM_CONDITIONAL(USE_MPCTL_SOCKET, test "x${target_msm8226}" = "xyes")
+#AM_CONDITIONAL(USE_MPCTL_SOCKET, test "x${target_msm8916}" = "xyes")
+AM_CONDITIONAL(USE_GLIB, test "x${with_glib}" = "xyes")
+
+AC_CONFIG_FILES([ \
+	Makefile 
+	])
+AC_OUTPUT
diff --git a/decision-cores.c b/decision-cores.c
index c5d7eaf..68a359e 100644
--- a/decision-cores.c
+++ b/decision-cores.c
@@ -12,6 +12,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <stdint.h>
+#include <string.h>
 #include "decision.h"
 
 #define SYSFS_PLATFORMID   "/sys/devices/soc0/soc_id"
@@ -68,7 +70,6 @@ static int core_mapped_flag[MAX_CPUS] = {0};
 enum msm_id_types get_msm_id(void)
 {
 	static enum msm_id_types msm_id = NOT_DEFINED;
-	static uint8_t msm_id_init;
 	int fd;
 	int idx;
 	int soc_id;
@@ -102,7 +103,6 @@ enum msm_id_types get_msm_id(void)
 		dbgmsg("Unknown target identified with soc id %d\n", soc_id);
 
 failed:
-	msm_id_init = 1;
 	return msm_id;
 }
 
@@ -126,7 +126,7 @@ static void get_target_map(void)
 
 static void restrict_core0_hotplug(int *aggregated_order)
 {
-	int i, j, idx;
+	int i, j;
 
 	for (i = 0; i < MAX_CPUS; i++) {
 		if (aggregated_order[i] == 0) {
@@ -226,8 +226,6 @@ exit:
 void mpdecision_get_core_mapping(int *aggregated_order)
 {
 	int i, j;
-	float sortedmap[MAX_CPUS] = {0};
-	int unused[MAX_CPUS] = {0};
 
 	get_target_map();
 	for (i = 0; i < NUM_OF_MAPS; i++) {
diff --git a/decision.c b/decision.c
index 83cdc42..190cb1d 100644
--- a/decision.c
+++ b/decision.c
@@ -12,6 +12,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <stdint.h>
+#include <stdbool.h>
+#include <string.h>
 #include <errno.h>
 #include <sys/types.h>
 #include <sys/stat.h>
@@ -19,6 +22,7 @@
 #include <sys/resource.h>
 #include <fcntl.h>
 #include <time.h>
+#include <limits.h>
 #include <getopt.h>
 #include <pthread.h>
 #include <poll.h>
@@ -27,9 +31,12 @@
 #include <linux/types.h>
 #include <linux/netlink.h>
 #include <sys/syscall.h>
-#include <private/android_filesystem_config.h>
 #include <linux/un.h>
+#ifdef ANDROID
 #include <cutils/uevent.h>
+#include <private/android_filesystem_config.h>
+#endif
+
 #include "decision.h"
 #include <sched.h>
 #ifdef MPCTL_SERVER
@@ -39,6 +46,25 @@ extern void mpctl_server_exit(void);
 
 #define __NR_sched_setaffinity  (__NR_SYSCALL_BASE+241) /* ARM arch specific */
 
+#ifdef USE_ANDROID_LOG
+#define LOG_TAG "MP-Decision"
+#include "cutils/log.h"
+#ifdef LOGE
+#define msg(format, ...)   LOGE(format, ## __VA_ARGS__)
+#define info(format, ...)   LOGI(format, ## __VA_ARGS__)
+#else
+#define msg(format, ...)   ALOGE(format, ## __VA_ARGS__)
+#define info(format, ...)   ALOGI(format, ## __VA_ARGS__)
+#endif /* ifdef LOGE */
+#else
+#define msg(format, ...)   printf(format, ## __VA_ARGS__)
+#define info(format, ...)   printf(format, ## __VA_ARGS__)
+#endif
+
+#define dbgmsg(format, ...) \
+	if (debug_output) \
+		info(format, ## __VA_ARGS__)
+
 #define MAX_BUF (30)
 #define MAX_PATH (256)
 #define MIN_CPUS (1)
@@ -236,7 +262,6 @@ int mpdecision_lock_min_cores(int min)
 /*Update pm_qos latency to allow/disallow power collapse modes*/
 static int update_pm_qos_latency(int latency)
 {
-	int ret = 0;
 	static int prev_latency = -1;
 
 	if (prev_latency == latency) {
@@ -374,12 +399,8 @@ static int get_cpu_utils(int *hotplug_avg_load_up,
 				   int num_online)
 {
 	int ret = -ENODEV;
-	int fd = 0;
 	char buf[MAX_BUF] = {0};
 	int i,j;
-	int count = 0;
-	int max_wndw;
-	int val[MAX_CPUS] = {0};
 
 	*hotplug_avg_load_up = 0;
 	*hotplug_avg_load_dw = 0;
@@ -685,7 +706,6 @@ static void thermally_restricted_cores()
 static void *do_thermal_monitoring(void *data)
 {
 	int err = 0;
-	int ret;
 	struct pollfd fds;
 	uint32_t prev_thermal_cond;
 	int cpu, cpu_condition, prev_cpu_condition;
@@ -733,8 +753,7 @@ static void *do_thermal_monitoring(void *data)
 
 					pthread_mutex_lock(&hotplug_mutex);
 
-						ret = __act_on_decision(cpu,
-								CORE_UP);
+					__act_on_decision(cpu,CORE_UP);
 
 					pthread_mutex_unlock(&hotplug_mutex);
 
@@ -891,13 +910,14 @@ static int get_cpus_required(float rq_depth, float time)
 
 	return cpus_reqd;
 }
-
 /* hotplug thread - listens for kernel hotplug events */
 static void *do_hotplug_monitoring(void *data)
 {
 	int err = 0;
 	int cpu = 1;
+	struct sockaddr_nl addr;
 	struct pollfd fds;
+	int sz = 64*1024;
 	char buf[1024] = {0};
 	char cpu_online[MAX_BUF * 2] = {0};
 	char cpu_offline[MAX_BUF * 2] = {0};
@@ -908,7 +928,7 @@ static void *do_hotplug_monitoring(void *data)
 	* offline@/devices/system/cpu/cpuX */
 	snprintf(cpu_online, MAX_BUF * 2, "online@/devices/system/cpu/cpu" );
 	snprintf(cpu_offline, MAX_BUF * 2, "offline@/devices/system/cpu/cpu");
-
+#ifdef ANDROID
 	fds.events = POLLIN;
 	fds.fd = uevent_open_socket(64*1024, true);
 	if (fds.fd == -1) {
@@ -916,6 +936,7 @@ static void *do_hotplug_monitoring(void *data)
 		return NULL;
 	}
 
+
 	while (1) {
 
 		err = poll(&fds, 1, -1);
@@ -926,6 +947,34 @@ static void *do_hotplug_monitoring(void *data)
 
 		recv_bytes = uevent_kernel_multicast_recv(fds.fd, buf,
 						sizeof(buf));
+#else
+    memset(&addr, 0, sizeof(struct sockaddr_nl));
+	addr.nl_family = AF_NETLINK;
+	addr.nl_pid = getpid();
+	addr.nl_groups = -1;
+	fds.events = POLLIN;
+	fds.fd = socket(PF_NETLINK, SOCK_DGRAM, NETLINK_KOBJECT_UEVENT);
+	if (fds.fd == -1) {
+		msg("Insufficient permissions for hotplug.\n");
+		return NULL;
+	}
+	setsockopt(fds.fd, SOL_SOCKET, SO_RCVBUFFORCE, &sz, sizeof(sz));
+	err = bind(fds.fd, (void *)&addr, sizeof(struct sockaddr_nl));
+	if (err) {
+		msg("Unable to bind to socket.\n");
+		return NULL;
+	}
+
+	while (1) {
+
+		err = poll(&fds, 1, -1);
+		if (err == -1) {
+			msg("Error in hotplug CPU poll.\n");
+			break;
+		}
+
+		recv_bytes = recv(fds.fd, buf, sizeof(buf), MSG_DONTWAIT);
+#endif
 		if (recv_bytes == -1)
 			continue;
 		if (recv_bytes >= 1024)
@@ -968,11 +1017,8 @@ static void *do_mp_decision(void *data)
 {
 	float rq_depth = 0;
 	float time = 0;
-	int cpu = 0;
 	int cpus_reqd;
-	enum CORE_STATUS curr_online_status = CORE_DOWN;
 	unsigned int hotplug_disabled;
-	int i;
 	int num_online = 1;
 
 	while (1) {
@@ -1200,12 +1246,9 @@ static void parse_args(int argc, char *argv[])
 static unsigned int get_num_cpus()
 {
 	DIR *tdir = NULL;
-	struct dirent *tdirent = NULL;
 	int ncpus = 0;
-	char name[MAX_PATH] = {0};
 	char cwd[MAX_PATH] = {0};
 	int cpu = 0;
-	char buf[50];
 	struct dirent *cpu_dirent;
 
 	if (!getcwd(cwd, sizeof(cwd)))
@@ -1361,7 +1404,7 @@ int main(int argc, char *argv[])
 		return -1;
 
 	if (read_hotplug(HOTPLUG_DISABLE, &hotplug_disabled))
-		hotplug_disabled == 0;
+		hotplug_disabled = 0;
 
 	init_core_thermal_condition();
 	mpdecision_get_core_mapping(core_pref_order);
@@ -1389,7 +1432,6 @@ int main(int argc, char *argv[])
 	pthread_join(mp_decision, NULL);
 	pthread_join(thermal_monitor, NULL);
 	pthread_join(hotplug_monitor, NULL);
-
 	close_file_descriptors();
 
 #ifdef MPCTL_SERVER
-- 
1.7.9.5

