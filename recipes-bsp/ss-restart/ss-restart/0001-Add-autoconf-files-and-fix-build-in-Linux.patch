From 91389c251c95f2fa70159596597762d7d666a180 Mon Sep 17 00:00:00 2001
From: Gustavo Solaira <gustavos@qti.qualcomm.com>
Date: Wed, 22 Apr 2015 19:05:00 -0700
Subject: [PATCH] Add autoconf files and fix build in Linux

ssr_setup needs to be modified for Linux compilation
and also new autoconf files need to be added for it.
---
 Makefile.am                           |  5 ++++
 configure.ac                          | 55 +++++++++++++++++++++++++++++++++++
 ssr_setup/Makefile.am                 | 14 +++++++++
 ssr_setup/ssr_setup.c                 | 27 ++++++++++++++++-
 subsystem_ramdump/Makefile.am         |  3 +-
 subsystem_ramdump/subsystem_ramdump.c | 10 +++----
 6 files changed, 107 insertions(+), 7 deletions(-)
 create mode 100644 Makefile.am
 create mode 100644 configure.ac
 create mode 100644 ssr_setup/Makefile.am
 mode change 100755 => 100644 subsystem_ramdump/subsystem_ramdump.c

diff --git a/Makefile.am b/Makefile.am
new file mode 100644
index 0000000..6e4ade3
--- /dev/null
+++ b/Makefile.am
@@ -0,0 +1,5 @@
+# Makefile.am - Automake script for ss-restart
+#
+ACLOCAL_AMFLAGS = -I m4
+
+SUBDIRS = ssr_setup subsystem_ramdump
diff --git a/configure.ac b/configure.ac
new file mode 100644
index 0000000..ca36559
--- /dev/null
+++ b/configure.ac
@@ -0,0 +1,55 @@
+AC_PREREQ(2.61)
+AC_INIT([ss-restart], 1.0.0)
+AM_INIT_AUTOMAKE([-Wall gnu foreign])
+AM_MAINTAINER_MODE
+AC_CONFIG_HEADER([config.h])
+AC_CONFIG_MACRO_DIR([m4])
+
+AC_PROG_CC
+AM_PROG_CC_C_O
+AM_PROG_AS
+AC_PROG_LIBTOOL
+AC_PROG_AWK
+AC_PROG_CPP
+AC_PROG_INSTALL
+AC_PROG_LN_S
+AC_PROG_MAKE_SET
+
+PKG_PROG_PKG_CONFIG
+
+AC_ARG_WITH([kernel],
+      AC_HELP_STRING([--with-kernel=@<:@dir@:>@],
+         [Specify the location of the Linux kernel headers]),
+      [kerneldir=$withval],
+      with_kernel=no)
+
+if test "x$with_kernel" != "xno"; then
+   CFLAGS="${CFLAGS} -I${kerneldir}/include -I${kerneldir}/arch/arm/include"
+fi
+
+AC_ARG_WITH([glib],
+      AC_HELP_STRING([--with-glib],
+         [enable glib, building HLOS systems which use glib]))
+
+if (test "x${with_glib}" = "xyes"); then
+	AC_DEFINE(ENABLE_USEGLIB, 1, [Define if HLOS systems uses glib])
+	PKG_CHECK_MODULES(GTHREAD, gthread-2.0 >= 2.16, dummy=yes,
+				AC_MSG_ERROR(GThread >= 2.16 is required))
+	PKG_CHECK_MODULES(GLIB, glib-2.0 >= 2.16, dummy=yes,
+				AC_MSG_ERROR(GLib >= 2.16 is required))
+	GLIB_CFLAGS="$GLIB_CFLAGS $GTHREAD_CFLAGS"
+	GLIB_LIBS="$GLIB_LIBS $GTHREAD_LIBS"
+
+	AC_SUBST(GLIB_CFLAGS)
+	AC_SUBST(GLIB_LIBS)
+fi
+
+AM_CONDITIONAL(USE_GLIB, test "x${with_glib}" = "xyes")
+AC_SUBST([CFLAGS])
+AC_SUBST([CC])
+AC_CONFIG_FILES([	\
+	Makefile
+	subsystem_ramdump/Makefile
+	ssr_setup/Makefile
+	])
+AC_OUTPUT
diff --git a/ssr_setup/Makefile.am b/ssr_setup/Makefile.am
new file mode 100644
index 0000000..65438cd
--- /dev/null
+++ b/ssr_setup/Makefile.am
@@ -0,0 +1,14 @@
+AM_CFLAGS = -Wall \
+	-Wundef \
+	-Wno-trigraphs \
+	-Werror
+
+ssr_setup_SOURCES = ssr_setup.c
+
+if USE_GLIB
+ssr_setup_CFLAGS = $(AM_CFLAGS) -DUSE_GLIB @GLIB_CFLAGS@ \
+	`pkg-config --cflags glib-2.0`
+ssr_setup_LDFLAGS = @GLIB_LIBS@
+endif
+
+bin_PROGRAMS = ssr_setup
diff --git a/ssr_setup/ssr_setup.c b/ssr_setup/ssr_setup.c
index b25a91c..6c03d3c 100644
--- a/ssr_setup/ssr_setup.c
+++ b/ssr_setup/ssr_setup.c
@@ -7,7 +7,6 @@
 
 #include <stdio.h>
 #include <cutils/properties.h>
-#include "mdm_detect.h"
 #define LOG_TAG "ssr_setup"
 #include <cutils/log.h>
 
@@ -16,6 +15,32 @@
 #define MAX_NUM_SUBSYS 10
 #define SUBSYS_NAME_LEN 30
 
+#ifndef ANDROID_BUILD
+#include <errno.h>
+#include <fcntl.h>
+#include <stdlib.h>
+#include <string.h>
+#include <syslog.h>
+  #ifdef USE_GLIB
+  #include <glib/gprintf.h>
+  #define strlcpy g_strlcpy
+  #endif
+#define ALOGE(format, ...) syslog(LOG_ERR, format, ## __VA_ARGS__)
+#define ALOGI(format, ...) syslog(LOG_INFO, format, ## __VA_ARGS__)
+#define ALOGW(format, ...) syslog(LOG_WARNING, format, ## __VA_ARGS__)
+#define MAX_PATH_LEN 256
+#define MAX_NAME_LEN 32
+#define RET_SUCCESS 0
+#define RET_FAILED 1
+#define get_soc_name(x) NULL
+
+int property_get(const char *key, char *value, const char *default_value)
+{
+	strlcpy(value, default_value, strlen(default_value));
+	return 0;
+}
+#endif /* !ANDROID_BUILD */
+
 static char subsys_list[MAX_NUM_SUBSYS][SUBSYS_NAME_LEN];
 
 struct ssr_node_map {
diff --git a/subsystem_ramdump/Makefile.am b/subsystem_ramdump/Makefile.am
index 6e07abf..62be313 100644
--- a/subsystem_ramdump/Makefile.am
+++ b/subsystem_ramdump/Makefile.am
@@ -7,7 +7,8 @@ AM_CFLAGS = -Wall \
 subsystem_ramdump_SOURCES = subsystem_ramdump.c
 
 if USE_GLIB
-subsystem_ramdump_CFLAGS = $(AM_CFLAGS) -DUSE_GLIB @GLIB_CFLAGS@
+subsystem_ramdump_CFLAGS = $(AM_CFLAGS) -DUSE_GLIB @GLIB_CFLAGS@ \
+	`pkg-config --cflags glib-2.0`
 subsystem_ramdump_LDFLAGS = -lpthread -lrt @GLIB_LIBS@
 else
 subsystem_ramdump_LDFLAGS = -lpthread -lrt
diff --git a/subsystem_ramdump/subsystem_ramdump.c b/subsystem_ramdump/subsystem_ramdump.c
old mode 100755
new mode 100644
index 87a5743..0e507b5
--- a/subsystem_ramdump/subsystem_ramdump.c
+++ b/subsystem_ramdump/subsystem_ramdump.c
@@ -97,7 +97,7 @@ static int ssr_copy_dump_based_on_type(char *ramdump_path);
 #include <cutils/log.h>
 #define DUMP_NUM 10
 #else
-#define BUILD_FAVOR 0
+#define BUILD_FAVOR 1 // For APQ Linux
 #define RET_SUCCESS 0
 #define RET_FAILED 1
 #define MAX_PATH_LEN 255
@@ -108,7 +108,7 @@ static int ssr_copy_dump_based_on_type(char *ramdump_path);
   #define strlcat g_strlcat
   #define strlcpy g_strlcpy
   #endif
-#define DUMP_NUM 1
+#define DUMP_NUM 10 // For APQ Linux
 #define ALOGE(format, ...) syslog(LOG_ERR, format, ## __VA_ARGS__)
 #define ALOGI(format, ...) syslog(LOG_INFO, format, ## __VA_ARGS__)
 #define ALOGW(format, ...) syslog(LOG_WARNING, format, ## __VA_ARGS__)
@@ -144,7 +144,7 @@ struct dev_info {
 #define SSR_CONF_FILE "/etc/ssr.conf"
 #define SUBSYS_DIR "/sys/bus/msm_subsys/devices"
 #define DUMP_SETTING "/sys/module/subsystem_restart/parameters/enable_ramdumps"
-#define DUMP_EMMC_DIR "/data/ramdump"
+#define DUMP_EMMC_DIR "/var/log/ramdump" // For APQ Linux
 #define DUMP_HEAD_STR "ramdump_"
 #define DUMP_TAIL_BIN ".bin"
 #define DUMP_TAIL_ELF ".elf"
@@ -1180,7 +1180,7 @@ static void *qdss_mon(void* param)
 static void ssr_tool_helper(void)
 {
 	ALOGI("Usage:./system/bin/subsystem_ramdump [arg1] [arg2] [arg3]");
-	ALOGI("[arg1]: (1/2) Ramdump location: 1: eMMC: /data/ramdump or 2: SD card: /sdcard/ramdump");
+	ALOGI("[arg1]: (1/2) Ramdump location: 1: eMMC: " DUMP_EMMC_DIR " or 2: SD card: /sdcard/ramdump");
 	ALOGI("[arg2]: (1/0) 1: Enable RPM log / 0: Disable RPM log");
 	ALOGI("[arg3]: (1/0) 1: Enable qdss ramdump / 0: Disable qdss ramdump");
 }
@@ -1193,7 +1193,7 @@ static int parse_args(int argc, char **argv)
 	ssr_tool_helper();
 	if (argc == 1) {
 		// Use default ramdump location; disable rpm log ; disable qdss ramdump;
-		ALOGI(" Using default ramdump location 1: eMMC: /data/ramdump");
+		ALOGI(" Using default ramdump location 1: eMMC: " DUMP_EMMC_DIR);
 		ALOGI(" Using default 0: Disable RPM log");
 		ALOGI(" Using default 0: Disable qdss ramdump");
 
-- 
1.8.2.1

